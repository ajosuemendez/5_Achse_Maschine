# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DoldGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QApplication, QWidget, QFileDialog
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import rospy
from plyer import filechooser
from std_msgs.msg import Bool
from std_msgs.msg import String
from std_srvs.srv import SetBool
from project_praktikum_moveit_config.srv import CalculateJoints, SendCommand
import re
import math
import numpy
import roslaunch
import actionlib
from project_praktikum_moveit_config.msg import SerialCommunicationAction, SerialCommunicationGoal, ExecuteDesiredPoseAction, ExecuteDesiredPoseGoal

GLOBAL_LINES = ["",""]
class Finisher():
    def __init__(self):
        self.pub = rospy.Publisher("/shutdown_gui", Bool, queue_size=1)
        self.msg = False

    def clean_shutdown(self):
        self.msg = True
        self.pub.publish(self.msg)

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(str)
    action_client = actionlib.SimpleActionClient('serial_com', SerialCommunicationAction)
    action_client_execute = actionlib.SimpleActionClient('execute_action', ExecuteDesiredPoseAction)


    def call_action(self):
        self.action_client.wait_for_server()
        goal = SerialCommunicationGoal(command=GLOBAL_LINES[0])
        self.action_client.send_goal(goal, feedback_cb=self.run)


        self.action_client.wait_for_result()
        result = self.action_client.get_result()
        self.progress.emit(f"{result.result}")
        self.finished.emit()

    def call_action_execution(self):
        self.action_client_execute.wait_for_server()
        goal = ExecuteDesiredPoseGoal(command=True)
        self.action_client_execute.send_goal(goal)
        self.action_client_execute.wait_for_result()
        result = self.action_client_execute.get_result()
        # print(result.result)
        self.finished.emit()

    def run(self, msg):
        self.progress.emit(f"{msg.feedback}")




class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(793, 598)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(150, 20, 621, 331))
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.CalculateJoints = QtWidgets.QWidget()
        self.CalculateJoints.setObjectName("CalculateJoints")
        self.layoutWidget = QtWidgets.QWidget(self.CalculateJoints)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 11, 561, 263))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.desiredPoseLabel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.desiredPoseLabel.setFont(font)
        self.desiredPoseLabel.setStyleSheet("font: 14pt \"Ubuntu\";")
        self.desiredPoseLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.desiredPoseLabel.setIndent(0)
        self.desiredPoseLabel.setObjectName("desiredPoseLabel")
        self.verticalLayout_8.addWidget(self.desiredPoseLabel)
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.xmmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xmmLabel.setIndent(2)
        self.xmmLabel.setObjectName("xmmLabel")
        self.horizontalLayout_8.addWidget(self.xmmLabel)
        self.xmmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xmmLineEdit.setObjectName("xmmLineEdit")
        self.horizontalLayout_8.addWidget(self.xmmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.ymmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.ymmLabel.setIndent(2)
        self.ymmLabel.setObjectName("ymmLabel")
        self.horizontalLayout_9.addWidget(self.ymmLabel)
        self.ymmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.ymmLineEdit.setObjectName("ymmLineEdit")
        self.horizontalLayout_9.addWidget(self.ymmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.zmmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zmmLabel.setIndent(2)
        self.zmmLabel.setObjectName("zmmLabel")
        self.horizontalLayout_10.addWidget(self.zmmLabel)
        self.zmmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zmmLineEdit.setObjectName("zmmLineEdit")
        self.horizontalLayout_10.addWidget(self.zmmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.pitchLabel = QtWidgets.QLabel(self.layoutWidget)
        self.pitchLabel.setIndent(3)
        self.pitchLabel.setObjectName("pitchLabel")
        self.horizontalLayout_11.addWidget(self.pitchLabel)
        self.pitchLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.pitchLineEdit.setObjectName("pitchLineEdit")
        self.horizontalLayout_11.addWidget(self.pitchLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.yawLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yawLabel.setIndent(4)
        self.yawLabel.setObjectName("yawLabel")
        self.horizontalLayout_12.addWidget(self.yawLabel)
        self.yawLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yawLineEdit.setObjectName("yawLineEdit")
        self.horizontalLayout_12.addWidget(self.yawLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_12)
        self.verticalLayout_8.addLayout(self.verticalLayout_7)
        self.horizontalLayout_23.addLayout(self.verticalLayout_8)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.currentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        font = QtGui.QFont()
        font.setFamily("Ubuntu")
        font.setPointSize(14)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.currentJointsLabel.setFont(font)
        self.currentJointsLabel.setStyleSheet("font: 14pt \"Ubuntu\";")
        self.currentJointsLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.currentJointsLabel.setObjectName("currentJointsLabel")
        self.verticalLayout_9.addWidget(self.currentJointsLabel)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.xCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xCurrentJointsLabel.setIndent(3)
        self.xCurrentJointsLabel.setObjectName("xCurrentJointsLabel")
        self.horizontalLayout_13.addWidget(self.xCurrentJointsLabel)
        self.xCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xCurrentJointsLineEdit.setObjectName("xCurrentJointsLineEdit")
        self.horizontalLayout_13.addWidget(self.xCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.yCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yCurrentJointsLabel.setIndent(3)
        self.yCurrentJointsLabel.setObjectName("yCurrentJointsLabel")
        self.horizontalLayout_14.addWidget(self.yCurrentJointsLabel)
        self.yCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yCurrentJointsLineEdit.setObjectName("yCurrentJointsLineEdit")
        self.horizontalLayout_14.addWidget(self.yCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.zCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zCurrentJointsLabel.setIndent(3)
        self.zCurrentJointsLabel.setObjectName("zCurrentJointsLabel")
        self.horizontalLayout_15.addWidget(self.zCurrentJointsLabel)
        self.zCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zCurrentJointsLineEdit.setObjectName("zCurrentJointsLineEdit")
        self.horizontalLayout_15.addWidget(self.zCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.bCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.bCurrentJointsLabel.setIndent(1)
        self.bCurrentJointsLabel.setObjectName("bCurrentJointsLabel")
        self.horizontalLayout_16.addWidget(self.bCurrentJointsLabel)
        self.bCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.bCurrentJointsLineEdit.setObjectName("bCurrentJointsLineEdit")
        self.horizontalLayout_16.addWidget(self.bCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.cCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.cCurrentJointsLabel.setIndent(1)
        self.cCurrentJointsLabel.setObjectName("cCurrentJointsLabel")
        self.horizontalLayout_17.addWidget(self.cCurrentJointsLabel)
        self.cCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.cCurrentJointsLineEdit.setObjectName("cCurrentJointsLineEdit")
        self.horizontalLayout_17.addWidget(self.cCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_17)
        self.verticalLayout_9.addLayout(self.verticalLayout_10)
        self.horizontalLayout_23.addLayout(self.verticalLayout_9)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.calculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.calculatedJointsLabel.setStyleSheet("font: 14pt \"Ubuntu\";")
        self.calculatedJointsLabel.setAlignment(QtCore.Qt.AlignJustify|QtCore.Qt.AlignVCenter)
        self.calculatedJointsLabel.setIndent(0)
        self.calculatedJointsLabel.setObjectName("calculatedJointsLabel")
        self.verticalLayout_11.addWidget(self.calculatedJointsLabel)
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.xCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xCalculatedJointsLabel.setIndent(3)
        self.xCalculatedJointsLabel.setObjectName("xCalculatedJointsLabel")
        self.horizontalLayout_18.addWidget(self.xCalculatedJointsLabel)
        self.xCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xCalculatedJointsLineEdit.setObjectName("xCalculatedJointsLineEdit")
        self.horizontalLayout_18.addWidget(self.xCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.yCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yCalculatedJointsLabel.setIndent(3)
        self.yCalculatedJointsLabel.setObjectName("yCalculatedJointsLabel")
        self.horizontalLayout_19.addWidget(self.yCalculatedJointsLabel)
        self.yCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yCalculatedJointsLineEdit.setObjectName("yCalculatedJointsLineEdit")
        self.horizontalLayout_19.addWidget(self.yCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_19)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.zCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zCalculatedJointsLabel.setIndent(3)
        self.zCalculatedJointsLabel.setObjectName("zCalculatedJointsLabel")
        self.horizontalLayout_20.addWidget(self.zCalculatedJointsLabel)
        self.zCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zCalculatedJointsLineEdit.setObjectName("zCalculatedJointsLineEdit")
        self.horizontalLayout_20.addWidget(self.zCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.bCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.bCalculatedJointsLabel.setIndent(1)
        self.bCalculatedJointsLabel.setObjectName("bCalculatedJointsLabel")
        self.horizontalLayout_21.addWidget(self.bCalculatedJointsLabel)
        self.bCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.bCalculatedJointsLineEdit.setObjectName("bCalculatedJointsLineEdit")
        self.horizontalLayout_21.addWidget(self.bCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_21)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.cCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.cCalculatedJointsLabel.setIndent(1)
        self.cCalculatedJointsLabel.setObjectName("cCalculatedJointsLabel")
        self.horizontalLayout_22.addWidget(self.cCalculatedJointsLabel)
        self.cCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.cCalculatedJointsLineEdit.setObjectName("cCalculatedJointsLineEdit")
        self.horizontalLayout_22.addWidget(self.cCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_22)
        self.verticalLayout_11.addLayout(self.verticalLayout_12)
        self.horizontalLayout_23.addLayout(self.verticalLayout_11)
        self.horizontalLayout_28.addLayout(self.horizontalLayout_23)
        self.verticalLayout_13.addLayout(self.horizontalLayout_28)
        self.verticalLayout_15.addLayout(self.verticalLayout_13)
        self.calculateButton = QtWidgets.QPushButton(self.layoutWidget)
        self.calculateButton.setIconSize(QtCore.QSize(16, 16))
        self.calculateButton.setObjectName("calculateButton")
        self.calculateButton.clicked.connect(self.calculateCallback)
        self.verticalLayout_15.addWidget(self.calculateButton)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.gcodeLabel = QtWidgets.QLabel(self.layoutWidget)
        self.gcodeLabel.setIndent(0)
        self.gcodeLabel.setObjectName("gcodeLabel")
        self.horizontalLayout_24.addWidget(self.gcodeLabel)
        self.gcodeLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.gcodeLineEdit.setObjectName("gcodeLineEdit")
        self.horizontalLayout_24.addWidget(self.gcodeLineEdit)
        self.executeButton = QtWidgets.QPushButton(self.layoutWidget)
        self.executeButton.setObjectName("executeButton")
        self.executeButton.clicked.connect(self.executeCallback)
        self.horizontalLayout_24.addWidget(self.executeButton)
        self.verticalLayout_15.addLayout(self.horizontalLayout_24)
        self.tabWidget.addTab(self.CalculateJoints, "")
        self.Offsets = QtWidgets.QWidget()
        self.Offsets.setObjectName("Offsets")
        self.layoutWidget1 = QtWidgets.QWidget(self.Offsets)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 10, 571, 272))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setContentsMargins(-1, -1, 15, -1)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.offset_Label = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.offset_Label.setFont(font)
        self.offset_Label.setObjectName("offset_Label")
        self.verticalLayout_25.addWidget(self.offset_Label)
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.xOffsetLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.xOffsetLabel.setFont(font)
        self.xOffsetLabel.setObjectName("xOffsetLabel")
        self.horizontalLayout_25.addWidget(self.xOffsetLabel)
        self.xOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.xOffsetLineEdit.setObjectName("xOffsetLineEdit")
        self.horizontalLayout_25.addWidget(self.xOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_25)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.yOffsetLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.yOffsetLabel.setFont(font)
        self.yOffsetLabel.setObjectName("yOffsetLabel")
        self.horizontalLayout_26.addWidget(self.yOffsetLabel)
        self.yOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.yOffsetLineEdit.setObjectName("yOffsetLineEdit")
        self.horizontalLayout_26.addWidget(self.yOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.zOffsetLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.zOffsetLabel.setFont(font)
        self.zOffsetLabel.setObjectName("zOffsetLabel")
        self.horizontalLayout_27.addWidget(self.zOffsetLabel)
        self.zOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.zOffsetLineEdit.setObjectName("zOffsetLineEdit")
        self.horizontalLayout_27.addWidget(self.zOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_27)
        self.verticalLayout_16.addLayout(self.verticalLayout_14)
        self.setOffsetButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.setOffsetButton.setObjectName("setOffsetButton")
        self.setOffsetButton.clicked.connect(self.set_offsetCallback)
        self.verticalLayout_16.addWidget(self.setOffsetButton)
        self.verticalLayout_18.addLayout(self.verticalLayout_16)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.custom1Button = QtWidgets.QPushButton(self.layoutWidget1)
        self.custom1Button.setObjectName("custom1Button")
        self.verticalLayout_17.addWidget(self.custom1Button)
        self.custom2Button = QtWidgets.QPushButton(self.layoutWidget1)
        self.custom2Button.setObjectName("custom2Button")
        self.verticalLayout_17.addWidget(self.custom2Button)
        self.defaultButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.defaultButton.setObjectName("defaultButton")
        self.defaultButton.clicked.connect(self.setDefaultCallback)
        self.verticalLayout_17.addWidget(self.defaultButton)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.verticalLayout_25.addLayout(self.verticalLayout_18)
        self.horizontalLayout_36.addLayout(self.verticalLayout_25)
        self.verticalLayout_26 = QtWidgets.QVBoxLayout()
        self.verticalLayout_26.setContentsMargins(15, -1, -1, -1)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.worldFrameLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.worldFrameLabel.setFont(font)
        self.worldFrameLabel.setObjectName("worldFrameLabel")
        self.verticalLayout_26.addWidget(self.worldFrameLabel)
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.xFrameLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.xFrameLabel.setFont(font)
        self.xFrameLabel.setObjectName("xFrameLabel")
        self.horizontalLayout_33.addWidget(self.xFrameLabel)
        self.xFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.xFrameLineEdit.setObjectName("xFrameLineEdit")
        self.horizontalLayout_33.addWidget(self.xFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_33)
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.yFrameLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.yFrameLabel.setFont(font)
        self.yFrameLabel.setObjectName("yFrameLabel")
        self.horizontalLayout_34.addWidget(self.yFrameLabel)
        self.yFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.yFrameLineEdit.setObjectName("yFrameLineEdit")
        self.horizontalLayout_34.addWidget(self.yFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_34)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.zFrameLabel = QtWidgets.QLabel(self.layoutWidget1)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.zFrameLabel.setFont(font)
        self.zFrameLabel.setObjectName("zFrameLabel")
        self.horizontalLayout_35.addWidget(self.zFrameLabel)
        self.zFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.zFrameLineEdit.setObjectName("zFrameLineEdit")
        self.horizontalLayout_35.addWidget(self.zFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_35)
        self.verticalLayout_22.addLayout(self.verticalLayout_23)
        self.setFrameButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.setFrameButton.setObjectName("setFrameButton")
        self.setFrameButton.clicked.connect(self.setFrameButtonCallback)
        self.verticalLayout_22.addWidget(self.setFrameButton)
        self.verticalLayout_21.addLayout(self.verticalLayout_22)
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.customFrame1Button = QtWidgets.QPushButton(self.layoutWidget1)
        self.customFrame1Button.setObjectName("customFrame1Button")
        self.verticalLayout_24.addWidget(self.customFrame1Button)
        self.customFrame2Button = QtWidgets.QPushButton(self.layoutWidget1)
        self.customFrame2Button.setObjectName("customFrame2Button")
        self.verticalLayout_24.addWidget(self.customFrame2Button)
        self.defaultFrameButton = QtWidgets.QPushButton(self.layoutWidget1)
        self.defaultFrameButton.setObjectName("defaultFrameButton")
        self.defaultFrameButton.clicked.connect(self.defaultFrameCallback)
        self.verticalLayout_24.addWidget(self.defaultFrameButton)
        self.verticalLayout_21.addLayout(self.verticalLayout_24)
        self.verticalLayout_26.addLayout(self.verticalLayout_21)
        self.horizontalLayout_36.addLayout(self.verticalLayout_26)
        self.tabWidget.addTab(self.Offsets, "")
        self.Gcode = QtWidgets.QWidget()
        self.Gcode.setObjectName("Gcode")
        self.gcodeGenerationPlainTextEdit = QtWidgets.QPlainTextEdit(self.Gcode)
        self.gcodeGenerationPlainTextEdit.setGeometry(QtCore.QRect(11, 21, 461, 251))
        self.gcodeGenerationPlainTextEdit.setObjectName("gcodeGenerationPlainTextEdit")
        self.layoutWidget2 = QtWidgets.QWidget(self.Gcode)
        self.layoutWidget2.setGeometry(QtCore.QRect(480, 20, 120, 251))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.layoutWidget2)
        self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.dumperFileButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.dumperFileButton.setObjectName("dumperFileButton")
        self.dumperFileButton.clicked.connect(self.file_chooser)
        self.verticalLayout_19.addWidget(self.dumperFileButton)
        self.chosenFilelabel = QtWidgets.QLabel(self.layoutWidget2)
        self.chosenFilelabel.setAlignment(QtCore.Qt.AlignCenter)
        self.chosenFilelabel.setObjectName("chosenFilelabel")
        self.verticalLayout_19.addWidget(self.chosenFilelabel)
        self.generateGcodeButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.generateGcodeButton.setObjectName("generateGcodeButton")
        self.generateGcodeButton.clicked.connect(self.generate_gcodeCallback)
        self.verticalLayout_19.addWidget(self.generateGcodeButton)
        self.progressBar = QtWidgets.QProgressBar(self.layoutWidget2)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_19.addWidget(self.progressBar)
        self.saveButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.saveButton.setObjectName("saveButton")
        self.saveButton.clicked.connect(self.save_fileCallback)
        self.verticalLayout_19.addWidget(self.saveButton)
        self.tabWidget.addTab(self.Gcode, "")
        self.LoadGcode = QtWidgets.QWidget()
        self.LoadGcode.setObjectName("LoadGcode")
        self.extremesPlainTextEdit = QtWidgets.QPlainTextEdit(self.LoadGcode)
        self.extremesPlainTextEdit.setGeometry(QtCore.QRect(170, 30, 421, 131))
        self.extremesPlainTextEdit.setObjectName("extremesPlainTextEdit")
        self.calculateExtremesButton = QtWidgets.QPushButton(self.LoadGcode)
        self.calculateExtremesButton.setGeometry(QtCore.QRect(20, 180, 141, 101))
        self.calculateExtremesButton.setObjectName("calculateExtremesButton")
        self.calculateExtremesButton.clicked.connect(self.calulateExtremesCallback)
        self.loadGcodeButton = QtWidgets.QPushButton(self.LoadGcode)
        self.loadGcodeButton.setGeometry(QtCore.QRect(20, 30, 141, 71))
        self.loadGcodeButton.setObjectName("loadGcodeButton")
        self.loadGcodeButton.clicked.connect(self.loadGcodeCallback)
        self.layoutWidget3 = QtWidgets.QWidget(self.LoadGcode)
        self.layoutWidget3.setGeometry(QtCore.QRect(180, 180, 411, 101))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.xMinLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.xMinLabel.setObjectName("xMinLabel")
        self.horizontalLayout_29.addWidget(self.xMinLabel)
        self.xMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.xMinLineEdit.setObjectName("xMinLineEdit")
        self.horizontalLayout_29.addWidget(self.xMinLineEdit)
        self.xMaxLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.xMaxLabel.setObjectName("xMaxLabel")
        self.horizontalLayout_29.addWidget(self.xMaxLabel)
        self.xMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.xMaxLineEdit.setObjectName("xMaxLineEdit")
        self.horizontalLayout_29.addWidget(self.xMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.yMinLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.yMinLabel.setObjectName("yMinLabel")
        self.horizontalLayout_30.addWidget(self.yMinLabel)
        self.yMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.yMinLineEdit.setObjectName("yMinLineEdit")
        self.horizontalLayout_30.addWidget(self.yMinLineEdit)
        self.yMaxLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.yMaxLabel.setObjectName("yMaxLabel")
        self.horizontalLayout_30.addWidget(self.yMaxLabel)
        self.yMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.yMaxLineEdit.setObjectName("yMaxLineEdit")
        self.horizontalLayout_30.addWidget(self.yMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_30)
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.zMinLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.zMinLabel.setObjectName("zMinLabel")
        self.horizontalLayout_31.addWidget(self.zMinLabel)
        self.zMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.zMinLineEdit.setObjectName("zMinLineEdit")
        self.horizontalLayout_31.addWidget(self.zMinLineEdit)
        self.zMaxLabel = QtWidgets.QLabel(self.layoutWidget3)
        self.zMaxLabel.setObjectName("zMaxLabel")
        self.horizontalLayout_31.addWidget(self.zMaxLabel)
        self.zMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget3)
        self.zMaxLineEdit.setObjectName("zMaxLineEdit")
        self.horizontalLayout_31.addWidget(self.zMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_31)
        self.sendGcodeButton = QtWidgets.QPushButton(self.LoadGcode)
        self.sendGcodeButton.setGeometry(QtCore.QRect(20, 110, 141, 51))
        self.sendGcodeButton.setObjectName("sendGcodeButton")
        self.sendGcodeButton.clicked.connect(self.sendGcodeCallback)
        self.tabWidget.addTab(self.LoadGcode, "")
        self.layoutWidget4 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget4.setGeometry(QtCore.QRect(20, 20, 111, 331))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.layoutWidget4)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.connectButton = QtWidgets.QPushButton(self.layoutWidget4)
        self.connectButton.setObjectName("connectButton")
        self.connectButton.clicked.connect(self.connectCallback)
        self.verticalLayout_6.addWidget(self.connectButton)
        self.unlockButton = QtWidgets.QPushButton(self.layoutWidget4)
        self.unlockButton.setObjectName("unlockButton")
        self.unlockButton.clicked.connect(self.unlockCallback)
        self.verticalLayout_6.addWidget(self.unlockButton)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.Jogging = QtWidgets.QGroupBox(self.layoutWidget4)
        self.Jogging.setObjectName("Jogging")
        self.layoutWidget5 = QtWidgets.QWidget(self.Jogging)
        self.layoutWidget5.setGeometry(QtCore.QRect(10, 30, 91, 201))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget5)
        self.verticalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.backXButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.backXButton.setObjectName("backXButton")
        self.backXButton.clicked.connect(self.backXCallback)
        self.horizontalLayout_2.addWidget(self.backXButton)
        self.forwardXButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.forwardXButton.setObjectName("forwardXButton")
        self.forwardXButton.clicked.connect(self.forwardXCallback)
        self.horizontalLayout_2.addWidget(self.forwardXButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.backYButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.backYButton.setObjectName("backYButton")
        self.backYButton.clicked.connect(self.backYCallback)
        self.horizontalLayout_3.addWidget(self.backYButton)
        self.forwardYButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.forwardYButton.setObjectName("forwardYButton")
        self.forwardYButton.clicked.connect(self.forwardYCallback)
        self.horizontalLayout_3.addWidget(self.forwardYButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.backZButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.backZButton.setObjectName("backZButton")
        self.backZButton.clicked.connect(self.backZCallback)
        self.horizontalLayout_4.addWidget(self.backZButton)
        self.forwardZButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.forwardZButton.setObjectName("forwardZButton")
        self.forwardZButton.clicked.connect(self.forwardZCallback)
        self.horizontalLayout_4.addWidget(self.forwardZButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.backBButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.backBButton.setObjectName("backBButton")
        self.backBButton.clicked.connect(self.backBCallback)
        self.horizontalLayout_5.addWidget(self.backBButton)
        self.forwardBButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.forwardBButton.setObjectName("forwardBButton")
        self.forwardBButton.clicked.connect(self.forwardBCallback)
        self.horizontalLayout_5.addWidget(self.forwardBButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.backCButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.backCButton.setObjectName("backCButton")
        self.backCButton.clicked.connect(self.backCCallback)
        self.horizontalLayout_6.addWidget(self.backCButton)
        self.forwardCButton = QtWidgets.QPushButton(self.layoutWidget5)
        self.forwardCButton.setObjectName("forwardCButton")
        self.forwardCButton.clicked.connect(self.forwardCCallback)
        self.horizontalLayout_6.addWidget(self.forwardCButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.speedLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.speedLabel.setObjectName("speedLabel")
        self.horizontalLayout_7.addWidget(self.speedLabel)
        self.speedSpinBox = QtWidgets.QSpinBox(self.layoutWidget5)
        self.speedSpinBox.setObjectName("speedSpinBox")
        self.horizontalLayout_7.addWidget(self.speedSpinBox)
        self.verticalLayout_4.addLayout(self.horizontalLayout_7)
        self.verticalLayout_5.addWidget(self.Jogging)
        self.setButton = QtWidgets.QPushButton(self.layoutWidget4)
        self.setButton.setObjectName("setButton")
        self.setButton.clicked.connect(self.setCallback)
        self.verticalLayout_5.addWidget(self.setButton)
        self.verticalLayout_6.addLayout(self.verticalLayout_5)
        self.Serial = QtWidgets.QGroupBox(self.centralwidget)
        self.Serial.setGeometry(QtCore.QRect(70, 360, 701, 191))
        self.Serial.setObjectName("Serial")
        self.layoutWidget6 = QtWidgets.QWidget(self.Serial)
        self.layoutWidget6.setGeometry(QtCore.QRect(10, 30, 581, 151))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget6)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.cmdLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.cmdLabel.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.cmdLabel.setObjectName("cmdLabel")
        self.verticalLayout.addWidget(self.cmdLabel)
        self.outputLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.outputLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.outputLabel.setIndent(0)
        self.outputLabel.setObjectName("outputLabel")
        self.verticalLayout.addWidget(self.outputLabel)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.cmdLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.cmdLineEdit.setObjectName("cmdLineEdit")
        self.verticalLayout_2.addWidget(self.cmdLineEdit)
        self.outputPlainTextEdit = QtWidgets.QPlainTextEdit(self.layoutWidget6)
        self.outputPlainTextEdit.setObjectName("outputPlainTextEdit")
        self.verticalLayout_2.addWidget(self.outputPlainTextEdit)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.sendButton = QtWidgets.QPushButton(self.Serial)
        self.sendButton.setGeometry(QtCore.QRect(600, 30, 89, 25))
        self.sendButton.setObjectName("sendButton")
        self.sendButton.clicked.connect(self.sendCallback)
        self.layoutWidget7 = QtWidgets.QWidget(self.Serial)
        self.layoutWidget7.setGeometry(QtCore.QRect(80, 0, 220, 19)) ##HEREEEEE
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout(self.layoutWidget7)
        self.horizontalLayout_32.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.statusLabel = QtWidgets.QLabel(self.layoutWidget7)
        self.statusLabel.setObjectName("statusLabel")
        self.horizontalLayout_32.addWidget(self.statusLabel)
        self.idleLabel = QtWidgets.QLabel(self.layoutWidget7)
        self.idleLabel.setObjectName("idleLabel")
        self.horizontalLayout_32.addWidget(self.idleLabel)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 793, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        ####################################################
        ####################################################
        #My Initializations
        self.pos_offsets = [703,764,405] #central position
        self.set_offsets = [0,0,0]
        self.abs_offset = [530, 750, -224.8] #corresponding x,y,z offset #joints are at X530,Y750,Z225
        self.set_world_frame = [0,0,0]
        self.calculated_plan = False
        self.dumper_file = None
        self.full_list = []
        self.file_to_save  = False
        self.progress_value = 0
        self.SerialConnected = False


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.desiredPoseLabel.setText(_translate("MainWindow", "Desired Pose"))
        self.xmmLabel.setText(_translate("MainWindow", "X mm"))
        self.ymmLabel.setText(_translate("MainWindow", "Y mm"))
        self.zmmLabel.setText(_translate("MainWindow", "Z mm"))
        self.pitchLabel.setText(_translate("MainWindow", "Pitch"))
        self.yawLabel.setText(_translate("MainWindow", "Yaw"))
        self.currentJointsLabel.setText(_translate("MainWindow", "Current Joints"))
        self.xCurrentJointsLabel.setText(_translate("MainWindow", "X"))
        self.yCurrentJointsLabel.setText(_translate("MainWindow", "Y"))
        self.zCurrentJointsLabel.setText(_translate("MainWindow", "Z"))
        self.bCurrentJointsLabel.setText(_translate("MainWindow", "B"))
        self.cCurrentJointsLabel.setText(_translate("MainWindow", "C"))
        self.calculatedJointsLabel.setText(_translate("MainWindow", "Calculated Joints"))
        self.xCalculatedJointsLabel.setText(_translate("MainWindow", "X"))
        self.yCalculatedJointsLabel.setText(_translate("MainWindow", "Y"))
        self.zCalculatedJointsLabel.setText(_translate("MainWindow", "Z"))
        self.bCalculatedJointsLabel.setText(_translate("MainWindow", "B"))
        self.cCalculatedJointsLabel.setText(_translate("MainWindow", "C"))
        self.calculateButton.setText(_translate("MainWindow", "Calculate"))
        self.gcodeLabel.setText(_translate("MainWindow", "Gcode"))
        self.executeButton.setText(_translate("MainWindow", "Execute"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.CalculateJoints), _translate("MainWindow", "Calculate Joints"))
        self.offset_Label.setText(_translate("MainWindow", "Offset"))
        self.xOffsetLabel.setText(_translate("MainWindow", "X Offset"))
        self.yOffsetLabel.setText(_translate("MainWindow", "Y Offset"))
        self.zOffsetLabel.setText(_translate("MainWindow", "Z Offset"))
        self.setOffsetButton.setText(_translate("MainWindow", "Set Offset"))
        self.custom1Button.setText(_translate("MainWindow", "Custom1"))
        self.custom2Button.setText(_translate("MainWindow", "Custom2"))
        self.defaultButton.setText(_translate("MainWindow", "Default"))
        self.worldFrameLabel.setText(_translate("MainWindow", "World Frame"))
        self.xFrameLabel.setText(_translate("MainWindow", "X"))
        self.yFrameLabel.setText(_translate("MainWindow", "Y"))
        self.zFrameLabel.setText(_translate("MainWindow", "Z"))
        self.setFrameButton.setText(_translate("MainWindow", "Set Frame"))
        self.customFrame1Button.setText(_translate("MainWindow", "Custom1"))
        self.customFrame2Button.setText(_translate("MainWindow", "Custom2"))
        self.defaultFrameButton.setText(_translate("MainWindow", "Default"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Offsets), _translate("MainWindow", "Offsets"))
        self.dumperFileButton.setText(_translate("MainWindow", "Dumper File"))
        self.chosenFilelabel.setText(_translate("MainWindow", "Chosen File"))
        self.generateGcodeButton.setText(_translate("MainWindow", "Generate Gcode"))
        self.saveButton.setText(_translate("MainWindow", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Gcode), _translate("MainWindow", "Gcode Generation"))
        self.calculateExtremesButton.setText(_translate("MainWindow", "Calculate Extremes"))
        self.loadGcodeButton.setText(_translate("MainWindow", "Load Gcode"))
        self.xMinLabel.setText(_translate("MainWindow", "X Min"))
        self.xMaxLabel.setText(_translate("MainWindow", "X Max"))
        self.yMinLabel.setText(_translate("MainWindow", "Y Min"))
        self.yMaxLabel.setText(_translate("MainWindow", "Y Max"))
        self.zMinLabel.setText(_translate("MainWindow", "Z min"))
        self.zMaxLabel.setText(_translate("MainWindow", "Z Max"))
        self.sendGcodeButton.setText(_translate("MainWindow", "Send Gcode"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.LoadGcode), _translate("MainWindow", "Load Gcode"))
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.unlockButton.setText(_translate("MainWindow", "Unlock"))
        self.Jogging.setTitle(_translate("MainWindow", "Jogging"))
        self.backXButton.setText(_translate("MainWindow", "-X"))
        self.forwardXButton.setText(_translate("MainWindow", "X"))
        self.backYButton.setText(_translate("MainWindow", "-Y"))
        self.forwardYButton.setText(_translate("MainWindow", "Y"))
        self.backZButton.setText(_translate("MainWindow", "-Z"))
        self.forwardZButton.setText(_translate("MainWindow", "Z"))
        self.backBButton.setText(_translate("MainWindow", "-B"))
        self.forwardBButton.setText(_translate("MainWindow", "B"))
        self.backCButton.setText(_translate("MainWindow", "-C"))
        self.forwardCButton.setText(_translate("MainWindow", "C"))
        self.speedLabel.setText(_translate("MainWindow", "Speed"))
        self.setButton.setText(_translate("MainWindow", "Set"))
        self.Serial.setTitle(_translate("MainWindow", "Serial"))
        self.cmdLabel.setText(_translate("MainWindow", "CMD"))
        self.outputLabel.setText(_translate("MainWindow", "OUTPUT"))
        self.sendButton.setText(_translate("MainWindow", "Send"))
        self.statusLabel.setText(_translate("MainWindow", "Status:"))
        self.idleLabel.setText(_translate("MainWindow", "Not Connected"))

    def showMessageBox(title=None, text="", icon="NoIcon", buttons=False, buttonsText=[],callback=None):
        qmb = QMessageBox()
        qmb.setText(text)
        #qmb.setWindowTitle(title)
        if icon == "NoIcon":
            qmb.setIcon(QMessageBox.NoIcon)
        if icon == "Information":
            qmb.setIcon(QMessageBox.Information)
        if icon == "Warning":
            qmb.setIcon(QMessageBox.Warning)
        if icon == "Critical":
            qmb.setIcon(QMessageBox.Critical)
        if icon == "Question":
            qmb.setIcon(QMessageBox.Question)

        if buttons == True:
            qmb.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            if len(buttonsText) == 2:
                qmb.button(QMessageBox.Ok).setText(buttonsText[0])
                qmb.button(QMessageBox.Cancel).setText(buttonsText[1])
        else:
            if len(buttonsText) == 1:
                qmb.setStandardButtons(QMessageBox.Ok)
                qmb.button(QMessageBox.Ok).setText(buttonsText[0])

        if qmb.exec() == QMessageBox.Ok:
            if callback:
                return callback()
            else:
                return None
        else:
            return None

    def calculateCallback(self):
        try:
            x = float(self.xmmLineEdit.text())
            y = float(self.ymmLineEdit.text())
            z = float(self.zmmLineEdit.text())
            pitch = float(self.pitchLineEdit.text())
            yaw = float(self.yawLineEdit.text())
        except ValueError:
            self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
            return None


        x = x + self.pos_offsets[0] + self.set_offsets[0] +self.set_world_frame[0]
        y = y + self.pos_offsets[1] + self.set_offsets[1] +self.set_world_frame[1]
        z = z + self.pos_offsets[2] + self.set_offsets[2] +self.set_world_frame[2]

        rospy.wait_for_service('/calc_pose')
        service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)

        try:
            request = CalculateJoints()
            request.x_input = x
            request.y_input = y
            request.z_input = z
            request.pitch_input = pitch
            request.yaw_input = yaw
            response = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
            #print(response)
        except rospy.ServiceException as exc:
            print("Service did not process request: " + str(exc))

        if response.success:
            #display the data received from the service
            #current_joints
            self.xCurrentJointsLineEdit.setText(str(round(response.joints[0]-self.abs_offset[0]-self.set_world_frame[0],2)))
            self.yCurrentJointsLineEdit.setText(str(round(response.joints[1]-self.abs_offset[1]-self.set_world_frame[1],2)))
            self.zCurrentJointsLineEdit.setText(str(round(response.joints[2]-self.abs_offset[2]-self.set_world_frame[2],2)))
            self.bCurrentJointsLineEdit.setText(str(round(response.joints[3],2)))
            self.cCurrentJointsLineEdit.setText(str(round(response.joints[4],2)))
            #calculated joints
            self.xCalculatedJointsLineEdit.setText(str(round(response.joints[5]-self.abs_offset[0]-self.set_world_frame[0],2)))
            self.yCalculatedJointsLineEdit.setText(str(round(response.joints[6]-self.abs_offset[1]-self.set_world_frame[1],2)))
            self.zCalculatedJointsLineEdit.setText(str(round(response.joints[7]-self.abs_offset[2]-self.set_world_frame[2],2)))
            self.bCalculatedJointsLineEdit.setText(str(round(response.joints[8],2)))
            self.cCalculatedJointsLineEdit.setText(str(round(response.joints[9],2)))

            self.gcodeLineEdit.setText(f"G01X{self.xCalculatedJointsLineEdit.text()}Y{self.yCalculatedJointsLineEdit.text()}Z{self.zCalculatedJointsLineEdit.text()}B{self.bCalculatedJointsLineEdit.text()}C{self.cCalculatedJointsLineEdit.text()}")

            self.calculated_plan = True
        else:
            self.showMessageBox(text="No Motion Plan Found", icon="Critical")
            return None


    def executeCallback(self):
        if self.calculated_plan:

            self.thread_execute = QThread()
            self.worker_execute = Worker()
            self.worker_execute.moveToThread(self.thread_execute)

            self.thread_execute.started.connect(self.worker_execute.call_action_execution)
            self.worker_execute.finished.connect(self.thread_execute.quit)
            self.worker_execute.finished.connect(self.worker_execute.deleteLater)
            self.thread_execute.finished.connect(self.thread_execute.deleteLater)
            #self.worker_execute.progress.connect(self.reportProgress_execution)

            self.thread_execute.start()
            ####START SERVICE CALL#######
            # rospy.wait_for_service('/execute_pose')
            # service_conn = rospy.ServiceProxy('/execute_pose', SetBool)
            #
            # try:
            #     request = SetBool()
            #     request.data = True
            #     response = service_conn(request.data)
            #     #print(response)
            # except rospy.ServiceException as exc:
            #     print("Service did not process request: " + str(exc))
            ######END SERVICE CALL#######

            self.calculated_plan = False
        else:
            self.showMessageBox(text="There is no calculated trajectory plan", icon="Critical")
            return None

    def feedback_callback(self,msg):
        print(msg.feedback)

    def set_offsetCallback(self, *args):
        try:
            self.set_offsets[0] = float(self.xOffsetLineEdit.text())
            self.set_offsets[1] = float(self.yOffsetLineEdit.text())
            self.set_offsets[2] = float(self.zOffsetLineEdit.text())
        except ValueError:
            self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
            return None

    def setDefaultCallback(self):
        defalutValue = 0
        self.xOffsetLineEdit.setText(str(defalutValue))
        self.yOffsetLineEdit.setText(str(defalutValue))
        self.zOffsetLineEdit.setText(str(defalutValue))
        #self.set_offsets[0] = defalutValue
        #self.set_offsets[1] = defalutValue
        #self.set_offsets[2] = defalutValue

    def setFrameButtonCallback(self):
        self.set_world_frame[0] = float(self.xFrameLineEdit.text())
        self.set_world_frame[1] = float(self.yFrameLineEdit.text())
        self.set_world_frame[2] = float(self.zFrameLineEdit.text())
        #print(f"setting world frame: x:{self.set_world_frame[0]} y:{self.set_world_frame[1]} z:{self.set_world_frame[2]}")

    def defaultFrameCallback(self):
        defaultVal = "0"
        self.xFrameLineEdit.setText(defaultVal)
        self.yFrameLineEdit.setText(defaultVal)
        self.zFrameLineEdit.setText(defaultVal)


    def file_chooser(self):
        filechooser.open_file(on_selection=self.selected)

    def selected(self, selection):
        self.dumper_file = selection[0]
        self.chosenFilelabel.setText(self.dumper_file[len(self.dumper_file)-self.dumper_file[::-1].find("/"):])


    def generate_gcodeCallback(self):
        lines = []
        self.full_list = []
        try:
            with open(self.dumper_file) as f:
                lines= f.readlines()

            one_p = len(lines)/100
            percentage = 0
            count = 0
            self.progress_value = 0
            x_offset = self.abs_offset[0] + self.set_world_frame[0]
            y_offset = self.abs_offset[1] + self.set_world_frame[1]
            z_offset = self.abs_offset[2] + self.set_world_frame[2]

            for line in lines:
                pattern = re.compile(r'([.-]|)((\d*\.\d*)|(\d*))')
                matches = pattern.finditer(str(line))
                tcp_coordinates = [match.group(0) for match in matches]
                tcp_coordinates = [elem for elem in tcp_coordinates if elem!=""]
                del tcp_coordinates[0]
                del tcp_coordinates[0]
                tcp_coordinates = [round(float(elem), 2) for elem in tcp_coordinates]
                self.full_list.append(tcp_coordinates)

            myatan = lambda x,y: numpy.pi*(1.0-0.5*(1+numpy.sign(x))*(1-numpy.sign(y**2))\
                     -0.25*(2+numpy.sign(x))*numpy.sign(y))\
                     -numpy.sign(x*y)*numpy.arctan((numpy.abs(x)-numpy.abs(y))/(numpy.abs(x)+numpy.abs(y)))

            coordinates = [(float("{:.2f}".format(math.degrees(myatan(elem[3], elem[4])))), float("{:.2f}".format(math.degrees(math.atan(math.sqrt(math.fabs(math.pow(elem[3],2)) + math.fabs(math.pow(elem[4],2)))/elem[5]))))) for elem in self.full_list]

            gcode = ""
            for i in range(len(coordinates)):
                self.full_list[i].append(coordinates[i][0])
                self.full_list[i].append(coordinates[i][1])
                abs_pos = [self.set_offsets[k] +self.pos_offsets[k] + self.full_list[i][k] for k in range(len(self.pos_offsets))]

                if i>=1:


                    if abs(self.full_list[i][-2]- self.full_list[i-1][-2])>300:
                        m = math.tan(math.radians(self.full_list[i][-1])) #steigung
                        x_deviation = 50 #in mm
                        z_deviation = m*x_deviation # linear equation in mm

                        # rospy.wait_for_service('/plan_cartesian')
                        # service_conn = rospy.ServiceProxy('/plan_cartesian', CalculateJoints)
                        # try:
                        #     request = CalculateJoints()
                        #     request.x_input = x_deviation
                        #     request.y_input = 0
                        #     request.z_input = z_deviation
                        #     request.pitch_input = 0
                        #     request.yaw_input = 0
                        #     response = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                        #     #print(response)
                        # except rospy.ServiceException as exc:
                        #     print("Service did not process request: " + str(exc))

                        rospy.wait_for_service('/calc_pose')
                        service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)
                        try:
                            request = CalculateJoints()
                            request.x_input = self.set_offsets[0] +self.pos_offsets[0] + self.full_list[i-1][0] + x_deviation
                            request.y_input = self.set_offsets[1] +self.pos_offsets[1] + self.full_list[i-1][1]
                            request.z_input = self.set_offsets[2] +self.pos_offsets[2] + self.full_list[i-1][2] + z_deviation
                            request.pitch_input = self.full_list[i-1][-1]
                            request.yaw_input = self.full_list[i-1][-2]
                            response = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                            #print(response)
                            if response.success:
                                feed_rate = 600
                                #print(f"Completed Trajectory Planned And To Be Executed After {attempts} Attempts")
                                #tutorial.execute_plan(cartesian_plan)
                                gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{round(response.joints[9],2)}F{feed_rate}\n"
                                #call_bool_service('/save_gcode_point')
                                #determinating the direction (from 0 to 360 or 360 to 0)
                                if (self.full_list[i][-2] - self.full_list[i-1][-2]) < 0:
                                    #positive then rotate the other way (go to 0)
                                    print("going to 360 turning should be executed")
                                    #tutorial.go_to_joint_state(359.9)
                                    gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n"
                                    gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-x_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-z_deviation,2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n"

                                else:
                                    #negative then rotate the other way (go to 360)
                                    print("going to 0 turning should be executed")
                                    #tutorial.go_to_joint_state(0.0001)
                                    gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n"
                                    gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-x_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-z_deviation,2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n"
                            else:
                                #print(f"No proper Cartesian Plan Found after {attempts} Attempts!")
                                #ERROR_FLAG = True
                                self.showMessageBox(text="Cartesian plan Failed", icon="Critical")
                                return None

                        except rospy.ServiceException as exc:
                            print("Service did not process request: " + str(exc))



                rospy.wait_for_service('/calc_pose')
                service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)
                try:
                    request = CalculateJoints()
                    request.x_input = abs_pos[0]
                    request.y_input = abs_pos[1]
                    request.z_input = abs_pos[2]
                    request.pitch_input = self.full_list[i][-1]
                    request.yaw_input = self.full_list[i][-2]
                    response_srv = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                    #print(response)
                except rospy.ServiceException as exc:
                    print("Service did not process request: " + str(exc))

                if response_srv.success:
                    if len(self.full_list[i])>8:
                        x_no_offset = round(response_srv.joints[5]-x_offset -self.set_world_frame[0],2)
                        y_no_offset = round(response_srv.joints[6]-y_offset -self.set_world_frame[1],2)
                        z_no_offset = round(response_srv.joints[7]-z_offset -self.set_world_frame[2],2)
                        b_no_offset = round(response_srv.joints[8],2)
                        c_no_offset = round(response_srv.joints[9],2)
                        f_no_offset = round(self.full_list[i][6],2)
                        gcode += f"G01X{x_no_offset}Y{y_no_offset}Z{z_no_offset}B{b_no_offset}C{c_no_offset}F{f_no_offset}\n"
                        count += 1
                        if count > percentage:
                            print(f"{self.progress_value}%")
                            self.progress_value += 1
                            self.progressBar.setValue(self.progress_value)
                            percentage += one_p

                else:
                    self.showMessageBox(text="No Motion Plan Found", icon="Critical")
                    return None

        except Exception as e:
            self.showMessageBox(text="Error when generating the code", icon="Critical")
            print(e)

        self.gcodeGenerationPlainTextEdit.clear()
        self.gcodeGenerationPlainTextEdit.insertPlainText(gcode)
        self.file_to_save = True

    def save_fileCallback(self):
        if self.file_to_save:
            fileName, _ = QFileDialog.getSaveFileName(None,'Save File')
            file = open(fileName, 'w')
            file.write(self.gcodeGenerationPlainTextEdit.toPlainText())
            file.close()
        else:
            self.showMessageBox(text="Generate a File First", icon="Critical")


    def loadGcodeCallback(self):
        try:
            name, _ = QFileDialog.getOpenFileName(None, 'Open File')
            file = open(name,'r')
            with file:
                text = file.read()
                self.extremesPlainTextEdit.clear()
                self.extremesPlainTextEdit.insertPlainText(text)
        except FileNotFoundError:
            print("No File Was Chosen/Found")

    def sendGcodeCallback(self):
        if self.SerialConnected:
        #if True:
            self.outputPlainTextEdit.clear()
            GLOBAL_LINES[0] = self.extremesPlainTextEdit.toPlainText()
            #print(lines)
            #lines = lines.split("\n")
            #counter = 1
            if len(GLOBAL_LINES[0])>1:
                # for elem in lines:
                #     rospy.wait_for_service('/cmd_input')
                #     service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
                #
                #     try:
                #         request = SendCommand()
                #         request.command = elem
                #         response = service_conn(request.command)
                #         r.sleep()
                #
                #         #print(response)
                #     except rospy.ServiceException as exc:
                #         print("Service did not process request: " + str(exc))
                #
                #     if response.success:
                #         #self.outputPlainTextEdit.clear()
                #         self.outputPlainTextEdit.insertPlainText(f"{counter}: {response.message}\n")
                        # counter +=1
                ############SERVER#####################
                # rospy.wait_for_service('/cmd_input')
                # service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
                #
                # try:
                #     request = SendCommand()
                #     request.command = lines
                #     request.simple_stream = False
                #     response = service_conn(request.command, request.simple_stream)
                #     if response.success:
                #         #self.outputPlainTextEdit.clear()
                #         self.outputPlainTextEdit.insertPlainText(f"{response.message}")
                #
                #     #print(response)
                # except rospy.ServiceException as exc:
                #     print("Service did not process request: " + str(exc))

                ########ACTION######################
                # self.action_client.wait_for_server()
                # goal = SerialCommunicationGoal(command="5")
                # feed = self.action_client.send_goal(goal, feedback_cb=self.feedback_cb)
                #
                #
                # self.action_client.wait_for_result()
                # result = self.action_client.get_result()
                # print(result)

                self.thread = QThread()
                self.worker = Worker()
                self.worker.moveToThread(self.thread)

                self.thread.started.connect(self.worker.call_action)
                self.worker.finished.connect(self.thread.quit)
                self.worker.finished.connect(self.worker.deleteLater)
                self.thread.finished.connect(self.thread.deleteLater)
                self.worker.progress.connect(self.reportProgress)
                # Step 6: Start the thread
                self.thread.start()

                # Final resets
                # self.longRunningBtn.setEnabled(False)
                # self.thread.finished.connect(
                #     lambda: self.longRunningBtn.setEnabled(True)
                # )
                # self.thread.finished.connect(
                #     lambda: self.stepLabel.setText("Long-Running Step: 0")
                # )


            else:
                self.showMessageBox(text="no Gcode Found", icon="Critical")
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    # def feedback_cb(self, msg):
    #     print("Feedback received: ", msg)
    #     self.outputPlainTextEdit.clear()
    #     self.outputPlainTextEdit.insertPlainText(f"{feed}")

    def reportProgress(self,rec):
        self.outputPlainTextEdit.clear()
        self.outputPlainTextEdit.insertPlainText(f"{rec}")


    def calulateExtremesCallback(self):
        lines = self.extremesPlainTextEdit.toPlainText()
        lines = lines.split("\n")
        firstTime = True
        if len(lines)>1:
            for line in lines:
                if line:
                    try:
                        x_index = line.find("X")
                        y_index = line.find("Y")
                        z_index = line.find("Z")
                        b_index = line.find("B")

                        x_val = float(line[x_index+1:y_index])
                        y_val = float(line[y_index+1:z_index])
                        z_val = float(line[z_index+1:b_index])

                        if firstTime:
                            max_x = x_val
                            min_x = x_val
                            max_y = y_val
                            min_y = y_val
                            max_z = y_val
                            min_z = y_val
                            firstTime = False

                        if x_val > max_x:
                            max_x = x_val
                        if x_val < min_x:
                            min_x = x_val
                        if y_val > max_y:
                            max_y = y_val
                        if y_val < min_y:
                            min_y = y_val
                        if z_val > max_z:
                            max_z = z_val
                        if z_val < min_z:
                            min_z = z_val

                        if max_x and min_x and max_y and min_y and max_z and min_z:
                            self.xMinLineEdit.setText(str(min_x))
                            self.yMinLineEdit.setText(str(min_y))
                            self.zMinLineEdit.setText(str(min_z))
                            self.xMaxLineEdit.setText(str(max_x))
                            self.yMaxLineEdit.setText(str(max_y))
                            self.zMaxLineEdit.setText(str(max_z))
                    except Exception as e:
                        self.showMessageBox(text="Gcode Format Is Wrong", icon="Critical")
        else:
            self.showMessageBox(text="No Gcode File found", icon="Critical")

    def sendCallback(self):
        if self.SerialConnected:
        #if True:
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
            #print(len(self.cmdLineEdit.text())):
            try:
                request = SendCommand()
                request.command = self.cmdLineEdit.text()
                request.simple_stream = True
                response = service_conn(request.command,request.simple_stream)
                #print(response)
                if response.success:
                    message_str = ""
                    split_data = response.message.split('\\r\\n')
                    for i in split_data:
                        message_str += i+"\n"
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(message_str)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")




    def connectCallback(self):
        if not self.SerialConnected:
            node = roslaunch.core.Node("project_praktikum_moveit_config", "cls_ros_ser_com.py")
            launch = roslaunch.scriptapi.ROSLaunch()
            launch.start()
            script = launch.launch(node)

            self.outputPlainTextEdit.clear()
            self.outputPlainTextEdit.insertPlainText("Node Is Running")
            self.SerialConnected = True
            self.idleLabel.setText("Connected Locked")


    def unlockCallback(self):
        #if True:
        if self.SerialConnected:
            rospy.sleep(1.)
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = "$X"
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)
                    self.idleLabel.setText("Connected Unlocked")
            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    def backXCallback(self):
        if self.SerialConnected:
            global_coordinates[0] -= self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"

            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    def forwardXCallback(self):
        if self.SerialConnected:
            global_coordinates[0] += self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"

            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def backYCallback(self):
        if self.SerialConnected:
            global_coordinates[1] -= self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def forwardYCallback(self):
        if self.SerialConnected:
            global_coordinates[1] += self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def backZCallback(self):
        if self.SerialConnected:
            global_coordinates[2] -= self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def forwardZCallback(self):
        if self.SerialConnected:
            global_coordinates[2] += self.speedSpinBox.value()*global_factor
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    def backBCallback(self):
        if self.SerialConnected:
            global_coordinates[3] -= self.speedSpinBox.value()*global_factor
            if global_coordinates[3]<-360:
                global_coordinates[3] = -360
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    def forwardBCallback(self):
        if self.SerialConnected:
            global_coordinates[3] += self.speedSpinBox.value()*global_factor
            if global_coordinates[3]>360:
                global_coordinates[3] = 360
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    def backCCallback(self):
        if self.SerialConnected:
            global_coordinates[4] -= self.speedSpinBox.value()*global_factor
            if global_coordinates[4]<-360:
                global_coordinates[4] = -360
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def forwardCCallback(self):
        if self.SerialConnected:
            global_coordinates[4] += self.speedSpinBox.value()*global_factor
            if global_coordinates[4]>360:
                global_coordinates[4] = 360
            gcode = f"$J=X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}F{global_F}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def setCallback(self):
        if self.SerialConnected:
            global_coordinates[0] = 0
            global_coordinates[1] = 0
            global_coordinates[2] = 0
            global_coordinates[3] = 0
            global_coordinates[4] = 0

            gcode = f"G92X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")



if __name__ == "__main__":
    import sys
    rospy.init_node('doldGui', anonymous=True)
    rospy.on_shutdown(Finisher().clean_shutdown)
    pub = rospy.Publisher("/send_cmd", String, queue_size=1)
    global_coordinates = [0,0,0,0,0]
    global_factor = 1
    global_F = 500
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
