# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'DoldGui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox, QApplication, QWidget, QFileDialog
from PyQt5.QtCore import QObject, QThread, pyqtSignal
import rospy
from plyer import filechooser
from std_msgs.msg import Bool
from std_msgs.msg import String
from std_srvs.srv import SetBool
from dummy_robot_moveit_config.srv import CalculateJoints, SendCommand
import re
import math
import numpy
import roslaunch
import actionlib
from dummy_robot_moveit_config.msg import SerialCommunicationAction, SerialCommunicationGoal, ExecuteDesiredPoseAction, ExecuteDesiredPoseGoal
from dummy_robot_moveit_config.msg import ExecuteCartesianDesiredPoseAction, ExecuteCartesianDesiredPoseGoal
GLOBAL_LINES = ["",""]
GLOABAL_LINES_CARTESIAN = ["",""]
GLOBAL_CALCULATED_JOINTS = ["","","","","",""]

class Finisher():
    def __init__(self):
        self.pub = rospy.Publisher("/shutdown_gui", Bool, queue_size=1)
        self.msg = False

    def clean_shutdown(self):
        self.msg = True
        self.pub.publish(self.msg)

class Worker(QObject):
    finished = pyqtSignal()
    progress = pyqtSignal(str)
    action_client = actionlib.SimpleActionClient('serial_com', SerialCommunicationAction)
    action_client_execute = actionlib.SimpleActionClient('execute_action', ExecuteDesiredPoseAction)
    action_client_cartesian_execute = actionlib.SimpleActionClient('execute_cartesian_action', ExecuteCartesianDesiredPoseAction)


    def call_action(self):
        self.action_client.wait_for_server()
        goal = SerialCommunicationGoal(command=GLOBAL_LINES[0])
        self.action_client.send_goal(goal, feedback_cb=self.run)


        self.action_client.wait_for_result()
        result = self.action_client.get_result()
        self.progress.emit(f"{result.result}")
        self.finished.emit()

    def call_action_execution(self):
        self.action_client_execute.wait_for_server()
        goal = ExecuteDesiredPoseGoal(command=True, x_input=GLOBAL_CALCULATED_JOINTS[0], y_input=GLOBAL_CALCULATED_JOINTS[1], z_input=GLOBAL_CALCULATED_JOINTS[2], roll_input=GLOBAL_CALCULATED_JOINTS[3], pitch_input=GLOBAL_CALCULATED_JOINTS[4], yaw_input=GLOBAL_CALCULATED_JOINTS[5], check=2, sim_vel=0.5)
        self.action_client_execute.send_goal(goal)
        self.action_client_execute.wait_for_result()
        result = self.action_client_execute.get_result()
        #print(result.result)
        self.finished.emit()

    def cartesian_call_action_execution(self):
        x_list = []
        y_list = []
        z_list = []
        roll_list = []
        pitch_list = []
        yaw_list = []
        samples= []
        speed_list = []
        cartesian_list = []
        sim_vel_list = []

        x_list_distance = []
        y_list_distance = []
        z_list_distance = []
        roll_list_distance = []
        pitch_list_distance = []
        yaw_list_distance = []

        x_list_step = []
        y_list_step = []
        z_list_step = []
        roll_list_step = []
        pitch_list_step = []
        yaw_list_step = []

        my_list = []
        gcode_string = ""

        counter = 1

        lines = GLOABAL_LINES_CARTESIAN[0].split("\n")
        for i in range(len(lines)-1):
            x_index = lines[i].find("X")
            y_index = lines[i].find("Y")
            z_index = lines[i].find("Z")
            roll_index = lines[i].find("R")
            pitch_index = lines[i].find("P")
            yaw_index = lines[i].find("YA")
            speed_index = lines[i].find("SP")
            samples_index = lines[i].find("SAM")
            cartesian_index = lines[i].find("CAR")
            sim_vel_index = lines[i].find("V")

            x_val = lines[i][x_index+1:y_index]
            y_val = lines[i][y_index+1:z_index]
            z_val = lines[i][z_index+1:roll_index]
            roll_val = lines[i][roll_index+1:pitch_index]
            pitch_val = lines[i][pitch_index+1:yaw_index]
            yaw_val = lines[i][yaw_index+2:speed_index]
            if samples_index >0:
                speed_val = lines[i][speed_index+2:samples_index]
                samples_val = lines[i][samples_index+3:cartesian_index]
                cartesian_val = lines[i][cartesian_index+3:sim_vel_index]
                sim_vel_val =  lines[i][sim_vel_index+1:]
                print(f"x_val:{x_val}y_val{y_val}z_val{z_val}roll{roll_val}pitch{pitch_val}yaw_val{yaw_val}speed_val{speed_val}samples_val{samples_val}cartesian{cartesian_val}vel{sim_vel_val}")
                samples.append(float(samples_val))
                speed_list.append(float(speed_val))
                cartesian_list.append(cartesian_val)
                sim_vel_list.append(float(sim_vel_val))
            else:
                speed_val = lines[i][speed_index+2:]
                speed_list.append(float(speed_val))


            x_list.append(float(x_val)) #+ self.pos_offsets[0] + self.set_offsets[0] +self.set_world_frame[0])
            y_list.append(float(y_val)) #+ self.pos_offsets[1] + self.set_offsets[1] +self.set_world_frame[1])
            z_list.append(float(z_val)) #+ self.pos_offsets[2] + self.set_offsets[2] +self.set_world_frame[2])
            roll_list.append(float(roll_val))
            pitch_list.append(float(pitch_val))
            yaw_list.append(float(yaw_val))


        total_lines = sum(samples)#+len(samples)


        for k in range(len(samples)):
            x_list_distance.append(x_list[k+1] - x_list[k])
            y_list_distance.append(y_list[k+1] - y_list[k])
            z_list_distance.append(z_list[k+1] - z_list[k])
            roll_list_distance.append(roll_list[k+1] - roll_list[k])
            pitch_list_distance.append(pitch_list[k+1] - pitch_list[k])
            yaw_list_distance.append(yaw_list[k+1] - yaw_list[k])

            print(f"iteration: {k}, x_list_distance = {x_list_distance}, y_list_distance = {y_list_distance}, z_list_distance = {z_list_distance}, pitch_list_distance = {pitch_list_distance}, yaw_list_distance = {yaw_list_distance}")

            x_list_step.append(x_list_distance[k] / samples[k])
            y_list_step.append(y_list_distance[k] / samples[k])
            z_list_step.append(z_list_distance[k] / samples[k])
            roll_list_step.append(roll_list_distance[k] / samples[k])
            pitch_list_step.append(pitch_list_distance[k] / samples[k])
            yaw_list_step.append(yaw_list_distance[k] / samples[k])

            print(f"iteration: {k}, x_list_step = {x_list_step}, y_list_step = {y_list_step}, z_list_step = {z_list_step}, pitch_list_step = {pitch_list_step}, yaw_list_step = {yaw_list_step}")

            for i in range(int(samples[k])+1): ##for i in range(int(samples[k])+1):
                if i!=0:
                    x_input = x_list[k] + i*x_list_step[k]
                    y_input = y_list[k] + i*y_list_step[k]
                    z_input = z_list[k] + i*z_list_step[k]
                    roll_input = roll_list[k] + i*roll_list_step[k]
                    pitch_input = pitch_list[k] + i*pitch_list_step[k]
                    yaw_input = yaw_list[k] + i*yaw_list_step[k]

                    if cartesian_list[k] == "True": #cartesian
                        print("getting the action server Cartesian")
                        self.action_client_cartesian_execute.wait_for_server()
                        goal = ExecuteCartesianDesiredPoseGoal(command=True, x_input=x_input, y_input=y_input, z_input=z_input, roll_input=roll_input, pitch_input=pitch_input, yaw_input=yaw_input, check=2, sim_vel=sim_vel_list[k])
                        self.action_client_cartesian_execute.send_goal(goal)
                        self.action_client_cartesian_execute.wait_for_result()
                        result = self.action_client_cartesian_execute.get_result()
                        #gcode_string += f"G01A{result.result[0]}B{result.result[1]}C{result.result[2]}D{result.result[3]}E{result.result[4]}H{result.result[5]}F{speed_list[k+1]}\n"
                        #print(gcode_string)
                        #self.progress.emit(f"G01A{result.result[0]}B{result.result[1]}C{result.result[2]}D{result.result[3]}E{result.result[4]}H{result.result[5]}F{speed_list[k+1]}\n")
                        #print("my result: ",result.result)
                        #self.finished.emit()

                    else:
                        print("getting the action server Non Cartesian")
                        self.action_client_execute.wait_for_server()
                        goal = ExecuteDesiredPoseGoal(command=True, x_input=x_input, y_input=y_input, z_input=z_input, roll_input=roll_input, pitch_input=pitch_input, yaw_input=yaw_input, check=2, sim_vel=sim_vel_list[k])
                        self.action_client_execute.send_goal(goal)
                        self.action_client_execute.wait_for_result()
                        result = self.action_client_execute.get_result()
                        #gcode_string += f"G01A{result.result[0]}B{result.result[1]}C{result.result[2]}D{result.result[3]}E{result.result[4]}H{result.result[5]}F{speed_list[k+1]}\n"
                        #print(gcode_string)
                        #self.progress.emit(f"G01A{result.result[0]}B{result.result[1]}C{result.result[2]}D{result.result[3]}E{result.result[4]}H{result.result[5]}F{speed_list[k+1]}\n")
                        # print(result.result)
                        #self.finished.emit()

                    end_J = []
                    #start = 6 if cartesian_list[k] == "True" else 0
                    start = 6
                    total_joints = len(result.result)
                    step = 1
                    #print("start",start)
                    #print("total joints", total_joints)

                    #print(response.joints)
                    for p in range(start,total_joints,step):
                        end_J.append(result.result[p])
                        #print(end_J)
                        if p%6 == 5:
                            gcode_string += f"G01A{end_J[p-5-start]}B{end_J[p-4-start]}C{end_J[p-3-start]}D{end_J[p-2-start]}E{end_J[p-1-start]}H{end_J[p-start]}F{speed_list[k+1]}\n"


        #print("Sending Generated Gcode")
        #print(result.result)
        self.progress.emit(gcode_string)
        print("finishing the thread")
        self.finished.emit()
        # self.cartesianGcodePlainTextEdit.clear()
        # for elem in my_list:
        #     self.cartesianGcodePlainTextEdit.insertPlainText(elem + "\n")



    def call_action_status(self):
        print("im going to sleep")
        rospy.sleep(2.0)
        print("im waking up")
        self.finished.emit()


    def run(self, msg):
        self.progress.emit(f"{msg.feedback}")

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(988, 780)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setGeometry(QtCore.QRect(270, 20, 681, 471))
        self.tabWidget.setMovable(True)
        self.tabWidget.setObjectName("tabWidget")
        self.CalculateJoints = QtWidgets.QWidget()
        self.CalculateJoints.setObjectName("CalculateJoints")
        self.layoutWidget = QtWidgets.QWidget(self.CalculateJoints)
        self.layoutWidget.setGeometry(QtCore.QRect(20, 80, 641, 337))
        self.layoutWidget.setObjectName("layoutWidget")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout(self.layoutWidget)
        self.verticalLayout_15.setContentsMargins(0, 0, 0, 15)
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setContentsMargins(-1, -1, -1, 10)
        self.horizontalLayout_28.setSpacing(6)
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setContentsMargins(-1, -1, -1, 0)
        self.verticalLayout_7.setSpacing(15)
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setContentsMargins(20, -1, -1, -1)
        self.horizontalLayout_8.setSpacing(15)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.xmmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xmmLabel.setIndent(2)
        self.xmmLabel.setObjectName("xmmLabel")
        self.horizontalLayout_8.addWidget(self.xmmLabel)
        self.xmmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xmmLineEdit.setObjectName("xmmLineEdit")
        self.horizontalLayout_8.addWidget(self.xmmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setContentsMargins(20, -1, -1, -1)
        self.horizontalLayout_9.setSpacing(15)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.ymmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.ymmLabel.setIndent(2)
        self.ymmLabel.setObjectName("ymmLabel")
        self.horizontalLayout_9.addWidget(self.ymmLabel)
        self.ymmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.ymmLineEdit.setObjectName("ymmLineEdit")
        self.horizontalLayout_9.addWidget(self.ymmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setContentsMargins(20, -1, -1, -1)
        self.horizontalLayout_10.setSpacing(15)
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.zmmLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zmmLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.zmmLabel.setIndent(2)
        self.zmmLabel.setObjectName("zmmLabel")
        self.horizontalLayout_10.addWidget(self.zmmLabel)
        self.zmmLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zmmLineEdit.setObjectName("zmmLineEdit")
        self.horizontalLayout_10.addWidget(self.zmmLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_47 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_47.setContentsMargins(4, -1, -1, -1)
        self.horizontalLayout_47.setSpacing(10)
        self.horizontalLayout_47.setObjectName("horizontalLayout_47")
        self.rollLabel = QtWidgets.QLabel(self.layoutWidget)
        self.rollLabel.setIndent(3)
        self.rollLabel.setObjectName("rollLabel")
        self.horizontalLayout_47.addWidget(self.rollLabel)
        self.rollLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.rollLineEdit.setObjectName("rollLineEdit")
        self.horizontalLayout_47.addWidget(self.rollLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_47)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setSpacing(4)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.pitchLabel = QtWidgets.QLabel(self.layoutWidget)
        self.pitchLabel.setIndent(3)
        self.pitchLabel.setObjectName("pitchLabel")
        self.horizontalLayout_11.addWidget(self.pitchLabel)
        self.pitchLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.pitchLineEdit.setObjectName("pitchLineEdit")
        self.horizontalLayout_11.addWidget(self.pitchLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_11)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setSpacing(4)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.yawLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yawLabel.setIndent(4)
        self.yawLabel.setObjectName("yawLabel")
        self.horizontalLayout_12.addWidget(self.yawLabel)
        self.yawLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yawLineEdit.setObjectName("yawLineEdit")
        self.horizontalLayout_12.addWidget(self.yawLineEdit)
        self.verticalLayout_7.addLayout(self.horizontalLayout_12)
        self.verticalLayout_8.addLayout(self.verticalLayout_7)
        self.horizontalLayout_23.addLayout(self.verticalLayout_8)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setSpacing(15)
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setSpacing(0)
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        self.xCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xCurrentJointsLabel.setIndent(3)
        self.xCurrentJointsLabel.setObjectName("xCurrentJointsLabel")
        self.horizontalLayout_13.addWidget(self.xCurrentJointsLabel)
        self.xCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xCurrentJointsLineEdit.setObjectName("xCurrentJointsLineEdit")
        self.horizontalLayout_13.addWidget(self.xCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setSpacing(0)
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.yCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yCurrentJointsLabel.setIndent(3)
        self.yCurrentJointsLabel.setObjectName("yCurrentJointsLabel")
        self.horizontalLayout_14.addWidget(self.yCurrentJointsLabel)
        self.yCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yCurrentJointsLineEdit.setObjectName("yCurrentJointsLineEdit")
        self.horizontalLayout_14.addWidget(self.yCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_14)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setSpacing(0)
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        self.zCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zCurrentJointsLabel.setIndent(3)
        self.zCurrentJointsLabel.setObjectName("zCurrentJointsLabel")
        self.horizontalLayout_15.addWidget(self.zCurrentJointsLabel)
        self.zCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zCurrentJointsLineEdit.setObjectName("zCurrentJointsLineEdit")
        self.horizontalLayout_15.addWidget(self.zCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_15)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setSpacing(0)
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.aCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.aCurrentJointsLabel.setIndent(1)
        self.aCurrentJointsLabel.setObjectName("aCurrentJointsLabel")
        self.horizontalLayout_16.addWidget(self.aCurrentJointsLabel)
        self.aCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.aCurrentJointsLineEdit.setObjectName("aCurrentJointsLineEdit")
        self.horizontalLayout_16.addWidget(self.aCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_48.setSpacing(0)
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.bCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.bCurrentJointsLabel.setIndent(1)
        self.bCurrentJointsLabel.setObjectName("bCurrentJointsLabel")
        self.horizontalLayout_48.addWidget(self.bCurrentJointsLabel)
        self.bCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.bCurrentJointsLineEdit.setObjectName("bCurrentJointsLineEdit")
        self.horizontalLayout_48.addWidget(self.bCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_48)
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setSpacing(0)
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        self.cCurrentJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.cCurrentJointsLabel.setIndent(1)
        self.cCurrentJointsLabel.setObjectName("cCurrentJointsLabel")
        self.horizontalLayout_17.addWidget(self.cCurrentJointsLabel)
        self.cCurrentJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.cCurrentJointsLineEdit.setObjectName("cCurrentJointsLineEdit")
        self.horizontalLayout_17.addWidget(self.cCurrentJointsLineEdit)
        self.verticalLayout_10.addLayout(self.horizontalLayout_17)
        self.verticalLayout_9.addLayout(self.verticalLayout_10)
        self.horizontalLayout_23.addLayout(self.verticalLayout_9)
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout()
        self.verticalLayout_12.setSpacing(15)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setSpacing(0)
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.xCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.xCalculatedJointsLabel.setIndent(3)
        self.xCalculatedJointsLabel.setObjectName("xCalculatedJointsLabel")
        self.horizontalLayout_18.addWidget(self.xCalculatedJointsLabel)
        self.xCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.xCalculatedJointsLineEdit.setObjectName("xCalculatedJointsLineEdit")
        self.horizontalLayout_18.addWidget(self.xCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setSpacing(0)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.yCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.yCalculatedJointsLabel.setIndent(3)
        self.yCalculatedJointsLabel.setObjectName("yCalculatedJointsLabel")
        self.horizontalLayout_19.addWidget(self.yCalculatedJointsLabel)
        self.yCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.yCalculatedJointsLineEdit.setObjectName("yCalculatedJointsLineEdit")
        self.horizontalLayout_19.addWidget(self.yCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_19)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setSpacing(0)
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.zCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.zCalculatedJointsLabel.setIndent(3)
        self.zCalculatedJointsLabel.setObjectName("zCalculatedJointsLabel")
        self.horizontalLayout_20.addWidget(self.zCalculatedJointsLabel)
        self.zCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.zCalculatedJointsLineEdit.setObjectName("zCalculatedJointsLineEdit")
        self.horizontalLayout_20.addWidget(self.zCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setSpacing(0)
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.aCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.aCalculatedJointsLabel.setIndent(1)
        self.aCalculatedJointsLabel.setObjectName("aCalculatedJointsLabel")
        self.horizontalLayout_21.addWidget(self.aCalculatedJointsLabel)
        self.aCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.aCalculatedJointsLineEdit.setObjectName("aCalculatedJointsLineEdit")
        self.horizontalLayout_21.addWidget(self.aCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_21)
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_49.setSpacing(0)
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        self.bCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.bCalculatedJointsLabel.setIndent(1)
        self.bCalculatedJointsLabel.setObjectName("bCalculatedJointsLabel")
        self.horizontalLayout_49.addWidget(self.bCalculatedJointsLabel)
        self.bCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.bCalculatedJointsLineEdit.setObjectName("bCalculatedJointsLineEdit")
        self.horizontalLayout_49.addWidget(self.bCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_49)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setSpacing(0)
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.cCalculatedJointsLabel = QtWidgets.QLabel(self.layoutWidget)
        self.cCalculatedJointsLabel.setIndent(1)
        self.cCalculatedJointsLabel.setObjectName("cCalculatedJointsLabel")
        self.horizontalLayout_22.addWidget(self.cCalculatedJointsLabel)
        self.cCalculatedJointsLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.cCalculatedJointsLineEdit.setObjectName("cCalculatedJointsLineEdit")
        self.horizontalLayout_22.addWidget(self.cCalculatedJointsLineEdit)
        self.verticalLayout_12.addLayout(self.horizontalLayout_22)
        self.verticalLayout_11.addLayout(self.verticalLayout_12)
        self.horizontalLayout_23.addLayout(self.verticalLayout_11)
        self.horizontalLayout_28.addLayout(self.horizontalLayout_23)
        self.verticalLayout_13.addLayout(self.horizontalLayout_28)
        self.verticalLayout_15.addLayout(self.verticalLayout_13)
        self.calculateButton = QtWidgets.QPushButton(self.layoutWidget)
        self.calculateButton.setAutoDefault(True)
        self.calculateButton.setObjectName("calculateButton")
        self.calculateButton.clicked.connect(self.calculateCallback)
        self.verticalLayout_15.addWidget(self.calculateButton)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setContentsMargins(0, 0, -1, -1)
        self.horizontalLayout_24.setSpacing(6)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.gcodeLabel = QtWidgets.QLabel(self.layoutWidget)
        self.gcodeLabel.setIndent(0)
        self.gcodeLabel.setObjectName("gcodeLabel")
        self.horizontalLayout_24.addWidget(self.gcodeLabel)
        self.gcodeLineEdit = QtWidgets.QLineEdit(self.layoutWidget)
        self.gcodeLineEdit.setObjectName("gcodeLineEdit")
        self.horizontalLayout_24.addWidget(self.gcodeLineEdit)
        self.simSpeedlabel = QtWidgets.QLabel(self.layoutWidget)
        self.simSpeedlabel.setObjectName("simSpeedlabel")
        self.horizontalLayout_24.addWidget(self.simSpeedlabel)
        self.simSpeedSpinBox = QtWidgets.QDoubleSpinBox(self.layoutWidget)
        self.simSpeedSpinBox.setMinimum(10.0)
        self.simSpeedSpinBox.setMaximum(100.0)
        self.simSpeedSpinBox.setSingleStep(10.0)
        self.simSpeedSpinBox.setProperty("value", 10.0)
        self.simSpeedSpinBox.setObjectName("simSpeedSpinBox")
        self.horizontalLayout_24.addWidget(self.simSpeedSpinBox)
        self.executeButton = QtWidgets.QPushButton(self.layoutWidget)
        self.executeButton.setAutoDefault(True)
        self.executeButton.setObjectName("executeButton")
        self.executeButton.clicked.connect(self.executeCallback)
        self.horizontalLayout_24.addWidget(self.executeButton)
        self.verticalLayout_15.addLayout(self.horizontalLayout_24)
        self.desiredPoseLabel = QtWidgets.QLabel(self.CalculateJoints)
        self.desiredPoseLabel.setGeometry(QtCore.QRect(60, 20, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.desiredPoseLabel.setFont(font)
        self.desiredPoseLabel.setObjectName("desiredPoseLabel")
        self.currentJointsLabel = QtWidgets.QLabel(self.CalculateJoints)
        self.currentJointsLabel.setGeometry(QtCore.QRect(260, 20, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.currentJointsLabel.setFont(font)
        self.currentJointsLabel.setObjectName("currentJointsLabel")
        self.calculatedJointsLabel = QtWidgets.QLabel(self.CalculateJoints)
        self.calculatedJointsLabel.setGeometry(QtCore.QRect(460, 20, 201, 51))
        font = QtGui.QFont()
        font.setPointSize(18)
        font.setBold(True)
        font.setWeight(75)
        self.calculatedJointsLabel.setFont(font)
        self.calculatedJointsLabel.setObjectName("calculatedJointsLabel")
        self.tabWidget.addTab(self.CalculateJoints, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.groupBox_5 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_5.setGeometry(QtCore.QRect(10, 10, 651, 121))
        self.groupBox_5.setObjectName("groupBox_5")
        self.layoutWidget1 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget1.setGeometry(QtCore.QRect(20, 30, 111, 27))
        self.layoutWidget1.setObjectName("layoutWidget1")
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout(self.layoutWidget1)
        self.horizontalLayout_50.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.xmmCartesianLabel = QtWidgets.QLabel(self.layoutWidget1)
        self.xmmCartesianLabel.setObjectName("xmmCartesianLabel")
        self.horizontalLayout_50.addWidget(self.xmmCartesianLabel)
        self.xmmCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget1)
        self.xmmCartesianLineEdit.setObjectName("xmmCartesianLineEdit")
        self.horizontalLayout_50.addWidget(self.xmmCartesianLineEdit)
        self.layoutWidget_4 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_4.setGeometry(QtCore.QRect(20, 60, 111, 27))
        self.layoutWidget_4.setObjectName("layoutWidget_4")
        self.horizontalLayout_53 = QtWidgets.QHBoxLayout(self.layoutWidget_4)
        self.horizontalLayout_53.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_53.setSpacing(17)
        self.horizontalLayout_53.setObjectName("horizontalLayout_53")
        self.rollCartesianLabel = QtWidgets.QLabel(self.layoutWidget_4)
        self.rollCartesianLabel.setObjectName("rollCartesianLabel")
        self.horizontalLayout_53.addWidget(self.rollCartesianLabel)
        self.rollCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_4)
        self.rollCartesianLineEdit.setObjectName("rollCartesianLineEdit")
        self.horizontalLayout_53.addWidget(self.rollCartesianLineEdit)
        self.layoutWidget_2 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_2.setGeometry(QtCore.QRect(140, 30, 111, 27))
        self.layoutWidget_2.setObjectName("layoutWidget_2")
        self.horizontalLayout_51 = QtWidgets.QHBoxLayout(self.layoutWidget_2)
        self.horizontalLayout_51.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_51.setObjectName("horizontalLayout_51")
        self.ymmCartesianLabel = QtWidgets.QLabel(self.layoutWidget_2)
        self.ymmCartesianLabel.setObjectName("ymmCartesianLabel")
        self.horizontalLayout_51.addWidget(self.ymmCartesianLabel)
        self.ymmCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_2)
        self.ymmCartesianLineEdit.setObjectName("ymmCartesianLineEdit")
        self.horizontalLayout_51.addWidget(self.ymmCartesianLineEdit)
        self.layoutWidget_5 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_5.setGeometry(QtCore.QRect(140, 60, 111, 27))
        self.layoutWidget_5.setObjectName("layoutWidget_5")
        self.horizontalLayout_54 = QtWidgets.QHBoxLayout(self.layoutWidget_5)
        self.horizontalLayout_54.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_54.setSpacing(10)
        self.horizontalLayout_54.setObjectName("horizontalLayout_54")
        self.pitchCartesianLabel = QtWidgets.QLabel(self.layoutWidget_5)
        self.pitchCartesianLabel.setObjectName("pitchCartesianLabel")
        self.horizontalLayout_54.addWidget(self.pitchCartesianLabel)
        self.pitchCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_5)
        self.pitchCartesianLineEdit.setObjectName("pitchCartesianLineEdit")
        self.horizontalLayout_54.addWidget(self.pitchCartesianLineEdit)
        self.layoutWidget_3 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_3.setGeometry(QtCore.QRect(260, 30, 101, 27))
        self.layoutWidget_3.setObjectName("layoutWidget_3")
        self.horizontalLayout_52 = QtWidgets.QHBoxLayout(self.layoutWidget_3)
        self.horizontalLayout_52.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_52.setObjectName("horizontalLayout_52")
        self.zmmCartesianLabel = QtWidgets.QLabel(self.layoutWidget_3)
        self.zmmCartesianLabel.setObjectName("zmmCartesianLabel")
        self.horizontalLayout_52.addWidget(self.zmmCartesianLabel)
        self.zmmCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_3)
        self.zmmCartesianLineEdit.setObjectName("zmmCartesianLineEdit")
        self.horizontalLayout_52.addWidget(self.zmmCartesianLineEdit)
        self.layoutWidget_6 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_6.setGeometry(QtCore.QRect(260, 60, 101, 27))
        self.layoutWidget_6.setObjectName("layoutWidget_6")
        self.horizontalLayout_55 = QtWidgets.QHBoxLayout(self.layoutWidget_6)
        self.horizontalLayout_55.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_55.setSpacing(16)
        self.horizontalLayout_55.setObjectName("horizontalLayout_55")
        self.yawCartesianLabel = QtWidgets.QLabel(self.layoutWidget_6)
        self.yawCartesianLabel.setObjectName("yawCartesianLabel")
        self.horizontalLayout_55.addWidget(self.yawCartesianLabel)
        self.yawCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_6)
        self.yawCartesianLineEdit.setObjectName("yawCartesianLineEdit")
        self.horizontalLayout_55.addWidget(self.yawCartesianLineEdit)
        self.cartesianModecheckBox = QtWidgets.QCheckBox(self.groupBox_5)
        self.cartesianModecheckBox.setGeometry(QtCore.QRect(20, 90, 131, 26))
        self.cartesianModecheckBox.setObjectName("cartesianModecheckBox")
        self.checkCartesianButton = QtWidgets.QPushButton(self.groupBox_5)
        self.checkCartesianButton.setGeometry(QtCore.QRect(510, 30, 121, 25))
        self.checkCartesianButton.setObjectName("checkCartesianButton")
        self.checkCartesianButton.clicked.connect(self.checkCartesianButtonCallback)
        self.desirePoseAddButton = QtWidgets.QPushButton(self.groupBox_5)
        self.desirePoseAddButton.setGeometry(QtCore.QRect(510, 90, 121, 25))
        self.desirePoseAddButton.setObjectName("desirePoseAddButton")
        self.desirePoseAddButton.clicked.connect(self.desirePoseAddButtonCallback)
        self.cartesianSimSpeedlabel = QtWidgets.QLabel(self.groupBox_5)
        self.cartesianSimSpeedlabel.setGeometry(QtCore.QRect(350, 90, 71, 26))
        self.cartesianSimSpeedlabel.setObjectName("cartesianSimSpeedlabel")
        self.cartesianSimSpeedSpinBox = QtWidgets.QDoubleSpinBox(self.groupBox_5)
        self.cartesianSimSpeedSpinBox.setGeometry(QtCore.QRect(430, 90, 73, 26))
        self.cartesianSimSpeedSpinBox.setMinimum(10.0)
        self.cartesianSimSpeedSpinBox.setMaximum(100.0)
        self.cartesianSimSpeedSpinBox.setSingleStep(10.0)
        self.cartesianSimSpeedSpinBox.setProperty("value", 10.0)
        self.cartesianSimSpeedSpinBox.setObjectName("cartesianSimSpeedSpinBox")
        self.desiredPoseProgressBar = QtWidgets.QProgressBar(self.groupBox_5)
        self.desiredPoseProgressBar.setGeometry(QtCore.QRect(510, 60, 121, 25))
        self.desiredPoseProgressBar.setProperty("value", 0)
        self.desiredPoseProgressBar.setObjectName("desiredPoseProgressBar")
        self.layoutWidget_7 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_7.setGeometry(QtCore.QRect(370, 30, 131, 27))
        self.layoutWidget_7.setObjectName("layoutWidget_7")
        self.horizontalLayout_56 = QtWidgets.QHBoxLayout(self.layoutWidget_7)
        self.horizontalLayout_56.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_56.setSpacing(20)
        self.horizontalLayout_56.setObjectName("horizontalLayout_56")
        self.speedCartesianLabel = QtWidgets.QLabel(self.layoutWidget_7)
        self.speedCartesianLabel.setObjectName("speedCartesianLabel")
        self.horizontalLayout_56.addWidget(self.speedCartesianLabel)
        self.speedCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_7)
        self.speedCartesianLineEdit.setObjectName("speedCartesianLineEdit")
        self.horizontalLayout_56.addWidget(self.speedCartesianLineEdit)
        self.layoutWidget_8 = QtWidgets.QWidget(self.groupBox_5)
        self.layoutWidget_8.setGeometry(QtCore.QRect(370, 60, 131, 27))
        self.layoutWidget_8.setObjectName("layoutWidget_8")
        self.horizontalLayout_57 = QtWidgets.QHBoxLayout(self.layoutWidget_8)
        self.horizontalLayout_57.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_57.setSpacing(6)
        self.horizontalLayout_57.setObjectName("horizontalLayout_57")
        self.samplesCartesianLabel = QtWidgets.QLabel(self.layoutWidget_8)
        self.samplesCartesianLabel.setObjectName("samplesCartesianLabel")
        self.horizontalLayout_57.addWidget(self.samplesCartesianLabel)
        self.samplesCartesianLineEdit = QtWidgets.QLineEdit(self.layoutWidget_8)
        self.samplesCartesianLineEdit.setObjectName("samplesCartesianLineEdit")
        self.horizontalLayout_57.addWidget(self.samplesCartesianLineEdit)
        self.groupBox_6 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_6.setGeometry(QtCore.QRect(10, 140, 651, 151))
        self.groupBox_6.setObjectName("groupBox_6")
        self.cartesianTrajectoryPlainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_6)
        self.cartesianTrajectoryPlainTextEdit.setGeometry(QtCore.QRect(10, 30, 531, 111))
        self.cartesianTrajectoryPlainTextEdit.setObjectName("cartesianTrajectoryPlainTextEdit")
        self.cartesianTrajectoryLoadButton = QtWidgets.QPushButton(self.groupBox_6)
        self.cartesianTrajectoryLoadButton.setGeometry(QtCore.QRect(550, 60, 91, 21))
        self.cartesianTrajectoryLoadButton.setObjectName("cartesianTrajectoryLoadButton")
        self.cartesianTrajectoryLoadButton.clicked.connect(self.cartesianTrajectoryLoadButtonCallback)
        self.cartesianTrajectorySaveButton = QtWidgets.QPushButton(self.groupBox_6)
        self.cartesianTrajectorySaveButton.setGeometry(QtCore.QRect(550, 120, 91, 21))
        self.cartesianTrajectorySaveButton.setObjectName("cartesianTrajectorySaveButton")
        self.cartesianTrajectorySaveButton.clicked.connect(self.cartesianTrajectorySaveButtonCallback)
        self.cartesianTrajectoryExecuteButton = QtWidgets.QPushButton(self.groupBox_6)
        self.cartesianTrajectoryExecuteButton.setGeometry(QtCore.QRect(550, 90, 91, 21))
        self.cartesianTrajectoryExecuteButton.setObjectName("cartesianTrajectoryExecuteButton")
        self.cartesianTrajectoryExecuteButton.clicked.connect(self.cartesianTrajectoryExecuteButtonCallback)
        self.cartesianTrajectoryPointsStartButton = QtWidgets.QPushButton(self.groupBox_6)
        self.cartesianTrajectoryPointsStartButton.setGeometry(QtCore.QRect(550, 30, 91, 21))
        self.cartesianTrajectoryPointsStartButton.setObjectName("cartesianTrajectoryPointsStartButton")
        self.cartesianTrajectoryPointsStartButton.clicked.connect(self.cartesianStartPointCallback)
        self.groupBox_7 = QtWidgets.QGroupBox(self.tab)
        self.groupBox_7.setGeometry(QtCore.QRect(10, 300, 651, 131))
        self.groupBox_7.setObjectName("groupBox_7")
        self.cartesianGcodePlainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox_7)
        self.cartesianGcodePlainTextEdit.setGeometry(QtCore.QRect(10, 30, 531, 91))
        self.cartesianGcodePlainTextEdit.setObjectName("cartesianGcodePlainTextEdit")
        self.cartesianGcodeGenerateButton = QtWidgets.QPushButton(self.groupBox_7)
        self.cartesianGcodeGenerateButton.setGeometry(QtCore.QRect(550, 30, 91, 25))
        self.cartesianGcodeGenerateButton.setObjectName("cartesianGcodeGenerateButton")
        self.cartesianGcodeGenerateButton.clicked.connect(self.cartesianGcodeGenerateButtonCallback)
        self.cartesianGcodeProgressBar = QtWidgets.QProgressBar(self.groupBox_7)
        self.cartesianGcodeProgressBar.setGeometry(QtCore.QRect(550, 60, 91, 23))
        self.cartesianGcodeProgressBar.setProperty("value", 0)
        self.cartesianGcodeProgressBar.setObjectName("cartesianGcodeProgressBar")
        self.cartesianGcodeSaveButton = QtWidgets.QPushButton(self.groupBox_7)
        self.cartesianGcodeSaveButton.setGeometry(QtCore.QRect(550, 90, 91, 31))
        self.cartesianGcodeSaveButton.setObjectName("cartesianGcodeSaveButton")
        self.tabWidget.addTab(self.tab, "")
        self.Offsets = QtWidgets.QWidget()
        self.Offsets.setObjectName("Offsets")
        self.layoutWidget2 = QtWidgets.QWidget(self.Offsets)
        self.layoutWidget2.setGeometry(QtCore.QRect(10, 0, 651, 384))
        self.layoutWidget2.setObjectName("layoutWidget2")
        self.horizontalLayout_36 = QtWidgets.QHBoxLayout(self.layoutWidget2)
        self.horizontalLayout_36.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_36.setObjectName("horizontalLayout_36")
        self.verticalLayout_25 = QtWidgets.QVBoxLayout()
        self.verticalLayout_25.setContentsMargins(15, 0, 15, -1)
        self.verticalLayout_25.setObjectName("verticalLayout_25")
        self.offset_Label = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(40)
        font.setBold(True)
        font.setWeight(75)
        self.offset_Label.setFont(font)
        self.offset_Label.setAlignment(QtCore.Qt.AlignCenter)
        self.offset_Label.setWordWrap(False)
        self.offset_Label.setObjectName("offset_Label")
        self.verticalLayout_25.addWidget(self.offset_Label)
        self.verticalLayout_18 = QtWidgets.QVBoxLayout()
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout()
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout()
        self.verticalLayout_14.setSpacing(15)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        self.xOffsetLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.xOffsetLabel.setFont(font)
        self.xOffsetLabel.setObjectName("xOffsetLabel")
        self.horizontalLayout_25.addWidget(self.xOffsetLabel)
        self.xOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.xOffsetLineEdit.setObjectName("xOffsetLineEdit")
        self.horizontalLayout_25.addWidget(self.xOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_25)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        self.yOffsetLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.yOffsetLabel.setFont(font)
        self.yOffsetLabel.setObjectName("yOffsetLabel")
        self.horizontalLayout_26.addWidget(self.yOffsetLabel)
        self.yOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.yOffsetLineEdit.setObjectName("yOffsetLineEdit")
        self.horizontalLayout_26.addWidget(self.yOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        self.zOffsetLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.zOffsetLabel.setFont(font)
        self.zOffsetLabel.setObjectName("zOffsetLabel")
        self.horizontalLayout_27.addWidget(self.zOffsetLabel)
        self.zOffsetLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.zOffsetLineEdit.setObjectName("zOffsetLineEdit")
        self.horizontalLayout_27.addWidget(self.zOffsetLineEdit)
        self.verticalLayout_14.addLayout(self.horizontalLayout_27)
        self.verticalLayout_16.addLayout(self.verticalLayout_14)
        self.setOffsetButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.setOffsetButton.setAutoDefault(True)
        self.setOffsetButton.setObjectName("setOffsetButton")
        self.setOffsetButton.clicked.connect(self.set_offsetCallback)
        self.verticalLayout_16.addWidget(self.setOffsetButton)
        self.verticalLayout_18.addLayout(self.verticalLayout_16)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setContentsMargins(-1, 40, -1, -1)
        self.verticalLayout_17.setSpacing(10)
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.defaultButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.defaultButton.setAutoDefault(True)
        self.defaultButton.setDefault(False)
        self.defaultButton.setObjectName("defaultButton")
        self.defaultButton.clicked.connect(self.setDefaultCallback)
        self.verticalLayout_17.addWidget(self.defaultButton)
        self.custom1Button = QtWidgets.QPushButton(self.layoutWidget2)
        self.custom1Button.setAutoDefault(True)
        self.custom1Button.setObjectName("custom1Button")
        self.custom1Button.clicked.connect(self.custom1Callback)
        self.verticalLayout_17.addWidget(self.custom1Button)
        self.custom2Button = QtWidgets.QPushButton(self.layoutWidget2)
        self.custom2Button.setAutoDefault(True)
        self.custom2Button.setDefault(False)
        self.custom2Button.setFlat(False)
        self.custom2Button.setObjectName("custom2Button")
        self.custom2Button.clicked.connect(self.custom2ButtonCallback)
        self.verticalLayout_17.addWidget(self.custom2Button)
        self.verticalLayout_18.addLayout(self.verticalLayout_17)
        self.verticalLayout_25.addLayout(self.verticalLayout_18)
        self.horizontalLayout_36.addLayout(self.verticalLayout_25)
        self.verticalLayout_26 = QtWidgets.QVBoxLayout()
        self.verticalLayout_26.setContentsMargins(15, -1, -1, -1)
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.worldFrameLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(40)
        font.setBold(True)
        font.setWeight(75)
        self.worldFrameLabel.setFont(font)
        self.worldFrameLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.worldFrameLabel.setObjectName("worldFrameLabel")
        self.verticalLayout_26.addWidget(self.worldFrameLabel)
        self.verticalLayout_21 = QtWidgets.QVBoxLayout()
        self.verticalLayout_21.setContentsMargins(-1, 0, -1, -1)
        self.verticalLayout_21.setObjectName("verticalLayout_21")
        self.verticalLayout_22 = QtWidgets.QVBoxLayout()
        self.verticalLayout_22.setObjectName("verticalLayout_22")
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setSpacing(15)
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        self.xFrameLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.xFrameLabel.setFont(font)
        self.xFrameLabel.setObjectName("xFrameLabel")
        self.horizontalLayout_33.addWidget(self.xFrameLabel)
        self.xFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.xFrameLineEdit.setObjectName("xFrameLineEdit")
        self.horizontalLayout_33.addWidget(self.xFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_33)
        self.horizontalLayout_34 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_34.setObjectName("horizontalLayout_34")
        self.yFrameLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.yFrameLabel.setFont(font)
        self.yFrameLabel.setObjectName("yFrameLabel")
        self.horizontalLayout_34.addWidget(self.yFrameLabel)
        self.yFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.yFrameLineEdit.setObjectName("yFrameLineEdit")
        self.horizontalLayout_34.addWidget(self.yFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_34)
        self.horizontalLayout_35 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_35.setObjectName("horizontalLayout_35")
        self.zFrameLabel = QtWidgets.QLabel(self.layoutWidget2)
        font = QtGui.QFont()
        font.setPointSize(18)
        self.zFrameLabel.setFont(font)
        self.zFrameLabel.setObjectName("zFrameLabel")
        self.horizontalLayout_35.addWidget(self.zFrameLabel)
        self.zFrameLineEdit = QtWidgets.QLineEdit(self.layoutWidget2)
        self.zFrameLineEdit.setObjectName("zFrameLineEdit")
        self.horizontalLayout_35.addWidget(self.zFrameLineEdit)
        self.verticalLayout_23.addLayout(self.horizontalLayout_35)
        self.verticalLayout_22.addLayout(self.verticalLayout_23)
        self.setFrameButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.setFrameButton.setAutoDefault(True)
        self.setFrameButton.setObjectName("setFrameButton")
        self.setFrameButton.clicked.connect(self.setFrameButtonCallback)
        self.verticalLayout_22.addWidget(self.setFrameButton)
        self.verticalLayout_21.addLayout(self.verticalLayout_22)
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setContentsMargins(-1, 40, -1, -1)
        self.verticalLayout_24.setSpacing(10)
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.defaultFrameButton = QtWidgets.QPushButton(self.layoutWidget2)
        self.defaultFrameButton.setAutoDefault(True)
        self.defaultFrameButton.setDefault(False)
        self.defaultFrameButton.setObjectName("defaultFrameButton")
        self.defaultFrameButton.clicked.connect(self.defaultFrameCallback)
        self.verticalLayout_24.addWidget(self.defaultFrameButton)
        self.customFrame1Button = QtWidgets.QPushButton(self.layoutWidget2)
        self.customFrame1Button.setAutoDefault(True)
        self.customFrame1Button.setObjectName("customFrame1Button")
        self.verticalLayout_24.addWidget(self.customFrame1Button)
        self.customFrame2Button = QtWidgets.QPushButton(self.layoutWidget2)
        self.customFrame2Button.setAutoDefault(True)
        self.customFrame2Button.setObjectName("customFrame2Button")
        self.verticalLayout_24.addWidget(self.customFrame2Button)
        self.verticalLayout_21.addLayout(self.verticalLayout_24)
        self.verticalLayout_26.addLayout(self.verticalLayout_21)
        self.horizontalLayout_36.addLayout(self.verticalLayout_26)
        self.tabWidget.addTab(self.Offsets, "")
        self.Gcode = QtWidgets.QWidget()
        self.Gcode.setObjectName("Gcode")
        self.gcodeGenerationPlainTextEdit = QtWidgets.QPlainTextEdit(self.Gcode)
        self.gcodeGenerationPlainTextEdit.setGeometry(QtCore.QRect(11, 81, 491, 251))
        self.gcodeGenerationPlainTextEdit.setObjectName("gcodeGenerationPlainTextEdit")
        self.layoutWidget3 = QtWidgets.QWidget(self.Gcode)
        self.layoutWidget3.setGeometry(QtCore.QRect(510, 80, 151, 251))
        self.layoutWidget3.setObjectName("layoutWidget3")
        self.verticalLayout_19 = QtWidgets.QVBoxLayout(self.layoutWidget3)
        self.verticalLayout_19.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_19.setObjectName("verticalLayout_19")
        self.dumperFileButton = QtWidgets.QPushButton(self.layoutWidget3)
        self.dumperFileButton.setAutoDefault(False)
        self.dumperFileButton.setDefault(True)
        self.dumperFileButton.setObjectName("dumperFileButton")
        self.dumperFileButton.clicked.connect(self.file_chooser)
        self.verticalLayout_19.addWidget(self.dumperFileButton)
        self.chosenFilelabel = QtWidgets.QLabel(self.layoutWidget3)
        self.chosenFilelabel.setAlignment(QtCore.Qt.AlignCenter)
        self.chosenFilelabel.setObjectName("chosenFilelabel")
        self.verticalLayout_19.addWidget(self.chosenFilelabel)
        self.generateGcodeButton = QtWidgets.QPushButton(self.layoutWidget3)
        self.generateGcodeButton.setAutoDefault(False)
        self.generateGcodeButton.setObjectName("generateGcodeButton")
        self.generateGcodeButton.clicked.connect(self.generate_gcodeCallback)
        self.verticalLayout_19.addWidget(self.generateGcodeButton)
        self.progressBar = QtWidgets.QProgressBar(self.layoutWidget3)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.verticalLayout_19.addWidget(self.progressBar)
        self.saveButton = QtWidgets.QPushButton(self.layoutWidget3)
        self.saveButton.setAutoDefault(False)
        self.saveButton.setDefault(True)
        self.saveButton.setObjectName("saveButton")
        self.saveButton.clicked.connect(self.save_fileCallback)
        self.verticalLayout_19.addWidget(self.saveButton)
        self.updateGcodeButton = QtWidgets.QPushButton(self.Gcode)
        self.updateGcodeButton.setGeometry(QtCore.QRect(510, 360, 151, 51))
        self.updateGcodeButton.setAutoDefault(False)
        self.updateGcodeButton.setFlat(False)
        self.updateGcodeButton.setObjectName("updateGcodeButton")
        self.updateGcodeButton.clicked.connect(self.updateGcodeCallback)
        self.groupBox = QtWidgets.QGroupBox(self.Gcode)
        self.groupBox.setGeometry(QtCore.QRect(10, 340, 491, 71))
        self.groupBox.setObjectName("groupBox")
        self.layoutWidget4 = QtWidgets.QWidget(self.groupBox)
        self.layoutWidget4.setGeometry(QtCore.QRect(10, 30, 471, 27))
        self.layoutWidget4.setObjectName("layoutWidget4")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout(self.layoutWidget4)
        self.horizontalLayout_38.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.speedDefaultRadioButton = QtWidgets.QRadioButton(self.layoutWidget4)
        self.speedDefaultRadioButton.setChecked(True)
        self.speedDefaultRadioButton.setObjectName("speedDefaultRadioButton")
        self.horizontalLayout_32.addWidget(self.speedDefaultRadioButton)
        self.speedRelativeRadioButton = QtWidgets.QRadioButton(self.layoutWidget4)
        self.speedRelativeRadioButton.setObjectName("speedRelativeRadioButton")
        self.horizontalLayout_32.addWidget(self.speedRelativeRadioButton)
        self.speedAbsoluteRadioButton = QtWidgets.QRadioButton(self.layoutWidget4)
        self.speedAbsoluteRadioButton.setObjectName("speedAbsoluteRadioButton")
        self.horizontalLayout_32.addWidget(self.speedAbsoluteRadioButton)
        self.horizontalLayout_38.addLayout(self.horizontalLayout_32)
        self.speedFlabel = QtWidgets.QLabel(self.layoutWidget4)
        self.speedFlabel.setObjectName("speedFlabel")
        self.horizontalLayout_38.addWidget(self.speedFlabel)
        self.speedConfigurationLineEdit = QtWidgets.QLineEdit(self.layoutWidget4)
        self.speedConfigurationLineEdit.setObjectName("speedConfigurationLineEdit")
        self.horizontalLayout_38.addWidget(self.speedConfigurationLineEdit)
        self.groupBox_3 = QtWidgets.QGroupBox(self.Gcode)
        self.groupBox_3.setGeometry(QtCore.QRect(10, 10, 201, 61))
        self.groupBox_3.setObjectName("groupBox_3")
        self.modeDefaultRadioButton = QtWidgets.QRadioButton(self.groupBox_3)
        self.modeDefaultRadioButton.setGeometry(QtCore.QRect(10, 30, 71, 23))
        self.modeDefaultRadioButton.setChecked(True)
        self.modeDefaultRadioButton.setObjectName("modeDefaultRadioButton")
        self.moveBackRadioButton = QtWidgets.QRadioButton(self.groupBox_3)
        self.moveBackRadioButton.setGeometry(QtCore.QRect(100, 30, 101, 23))
        self.moveBackRadioButton.setObjectName("moveBackRadioButton")
        self.groupBox_4 = QtWidgets.QGroupBox(self.Gcode)
        self.groupBox_4.setGeometry(QtCore.QRect(220, 10, 281, 61))
        self.groupBox_4.setObjectName("groupBox_4")
        self.onLinear5DCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.onLinear5DCheckBox.setGeometry(QtCore.QRect(10, 30, 101, 23))
        self.onLinear5DCheckBox.setChecked(True)
        self.onLinear5DCheckBox.setTristate(False)
        self.onLinear5DCheckBox.setObjectName("onLinear5DCheckBox")
        self.onRapid5DCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.onRapid5DCheckBox.setGeometry(QtCore.QRect(120, 30, 101, 23))
        self.onRapid5DCheckBox.setObjectName("onRapid5DCheckBox")
        self.allCheckBox = QtWidgets.QCheckBox(self.groupBox_4)
        self.allCheckBox.setGeometry(QtCore.QRect(230, 30, 41, 23))
        self.allCheckBox.setObjectName("allCheckBox")
        self.tabWidget.addTab(self.Gcode, "")
        self.LoadGcode = QtWidgets.QWidget()
        self.LoadGcode.setObjectName("LoadGcode")
        self.extremesPlainTextEdit = QtWidgets.QPlainTextEdit(self.LoadGcode)
        self.extremesPlainTextEdit.setGeometry(QtCore.QRect(170, 20, 491, 251))
        self.extremesPlainTextEdit.setObjectName("extremesPlainTextEdit")
        self.calculateExtremesButton = QtWidgets.QPushButton(self.LoadGcode)
        self.calculateExtremesButton.setGeometry(QtCore.QRect(20, 280, 141, 131))
        self.calculateExtremesButton.setAutoDefault(False)
        self.calculateExtremesButton.setObjectName("calculateExtremesButton")
        self.calculateExtremesButton.clicked.connect(self.calulateExtremesCallback)
        self.loadGcodeButton = QtWidgets.QPushButton(self.LoadGcode)
        self.loadGcodeButton.setGeometry(QtCore.QRect(20, 20, 141, 71))
        self.loadGcodeButton.setAutoDefault(False)
        self.loadGcodeButton.setDefault(True)
        self.loadGcodeButton.setObjectName("loadGcodeButton")
        self.loadGcodeButton.clicked.connect(self.loadGcodeCallback)
        self.layoutWidget5 = QtWidgets.QWidget(self.LoadGcode)
        self.layoutWidget5.setGeometry(QtCore.QRect(170, 280, 491, 131))
        self.layoutWidget5.setObjectName("layoutWidget5")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.layoutWidget5)
        self.verticalLayout_20.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.xMinLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.xMinLabel.setObjectName("xMinLabel")
        self.horizontalLayout_29.addWidget(self.xMinLabel)
        self.xMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.xMinLineEdit.setObjectName("xMinLineEdit")
        self.horizontalLayout_29.addWidget(self.xMinLineEdit)
        self.xMaxLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.xMaxLabel.setObjectName("xMaxLabel")
        self.horizontalLayout_29.addWidget(self.xMaxLabel)
        self.xMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.xMaxLineEdit.setObjectName("xMaxLineEdit")
        self.horizontalLayout_29.addWidget(self.xMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.yMinLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.yMinLabel.setObjectName("yMinLabel")
        self.horizontalLayout_30.addWidget(self.yMinLabel)
        self.yMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.yMinLineEdit.setObjectName("yMinLineEdit")
        self.horizontalLayout_30.addWidget(self.yMinLineEdit)
        self.yMaxLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.yMaxLabel.setObjectName("yMaxLabel")
        self.horizontalLayout_30.addWidget(self.yMaxLabel)
        self.yMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.yMaxLineEdit.setObjectName("yMaxLineEdit")
        self.horizontalLayout_30.addWidget(self.yMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_30)
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.zMinLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.zMinLabel.setObjectName("zMinLabel")
        self.horizontalLayout_31.addWidget(self.zMinLabel)
        self.zMinLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.zMinLineEdit.setObjectName("zMinLineEdit")
        self.horizontalLayout_31.addWidget(self.zMinLineEdit)
        self.zMaxLabel = QtWidgets.QLabel(self.layoutWidget5)
        self.zMaxLabel.setObjectName("zMaxLabel")
        self.horizontalLayout_31.addWidget(self.zMaxLabel)
        self.zMaxLineEdit = QtWidgets.QLineEdit(self.layoutWidget5)
        self.zMaxLineEdit.setObjectName("zMaxLineEdit")
        self.horizontalLayout_31.addWidget(self.zMaxLineEdit)
        self.verticalLayout_20.addLayout(self.horizontalLayout_31)
        self.sendGcodeButton = QtWidgets.QPushButton(self.LoadGcode)
        self.sendGcodeButton.setEnabled(False)
        self.sendGcodeButton.setGeometry(QtCore.QRect(20, 220, 141, 51))
        self.sendGcodeButton.setAutoDefault(False)
        self.sendGcodeButton.setDefault(True)
        self.sendGcodeButton.setObjectName("sendGcodeButton")
        self.sendGcodeButton.clicked.connect(self.sendGcodeCallback)
        self.tabWidget.addTab(self.LoadGcode, "")
        self.SetPoints = QtWidgets.QWidget()
        self.SetPoints.setObjectName("SetPoints")
        self.groupBox_2 = QtWidgets.QGroupBox(self.SetPoints)
        self.groupBox_2.setGeometry(QtCore.QRect(20, 10, 631, 181))
        self.groupBox_2.setObjectName("groupBox_2")
        self.layoutWidget6 = QtWidgets.QWidget(self.groupBox_2)
        self.layoutWidget6.setGeometry(QtCore.QRect(20, 40, 601, 132))
        self.layoutWidget6.setObjectName("layoutWidget6")
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout(self.layoutWidget6)
        self.horizontalLayout_45.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout()
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout()
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.horizontalLayout_39 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_39.setObjectName("horizontalLayout_39")
        self.addXLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addXLabel.setObjectName("addXLabel")
        self.horizontalLayout_39.addWidget(self.addXLabel)
        self.addXLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addXLineEdit.setObjectName("addXLineEdit")
        self.horizontalLayout_39.addWidget(self.addXLineEdit)
        self.verticalLayout_27.addLayout(self.horizontalLayout_39)
        self.horizontalLayout_40 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_40.setObjectName("horizontalLayout_40")
        self.addYLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addYLabel.setIndent(1)
        self.addYLabel.setObjectName("addYLabel")
        self.horizontalLayout_40.addWidget(self.addYLabel)
        self.addYLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addYLineEdit.setObjectName("addYLineEdit")
        self.horizontalLayout_40.addWidget(self.addYLineEdit)
        self.verticalLayout_27.addLayout(self.horizontalLayout_40)
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.addZLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addZLabel.setIndent(1)
        self.addZLabel.setObjectName("addZLabel")
        self.horizontalLayout_41.addWidget(self.addZLabel)
        self.addZLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addZLineEdit.setObjectName("addZLineEdit")
        self.horizontalLayout_41.addWidget(self.addZLineEdit)
        self.verticalLayout_27.addLayout(self.horizontalLayout_41)
        self.verticalLayout_32.addLayout(self.verticalLayout_27)
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        self.addSamplesLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addSamplesLabel.setObjectName("addSamplesLabel")
        self.horizontalLayout_46.addWidget(self.addSamplesLabel)
        self.addSamplesLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addSamplesLineEdit.setText("")
        self.addSamplesLineEdit.setObjectName("addSamplesLineEdit")
        self.horizontalLayout_46.addWidget(self.addSamplesLineEdit)
        self.verticalLayout_32.addLayout(self.horizontalLayout_46)
        self.horizontalLayout_45.addLayout(self.verticalLayout_32)
        self.verticalLayout_29 = QtWidgets.QVBoxLayout()
        self.verticalLayout_29.setObjectName("verticalLayout_29")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout()
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setSpacing(10)
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.addPitchLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addPitchLabel.setObjectName("addPitchLabel")
        self.horizontalLayout_42.addWidget(self.addPitchLabel)
        self.addPitchLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addPitchLineEdit.setObjectName("addPitchLineEdit")
        self.horizontalLayout_42.addWidget(self.addPitchLineEdit)
        self.verticalLayout_28.addLayout(self.horizontalLayout_42)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setSpacing(17)
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.addYawLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addYawLabel.setObjectName("addYawLabel")
        self.horizontalLayout_43.addWidget(self.addYawLabel)
        self.addYawLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addYawLineEdit.setObjectName("addYawLineEdit")
        self.horizontalLayout_43.addWidget(self.addYawLineEdit)
        self.verticalLayout_28.addLayout(self.horizontalLayout_43)
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_44.setSpacing(2)
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.addSpeedLabel = QtWidgets.QLabel(self.layoutWidget6)
        self.addSpeedLabel.setObjectName("addSpeedLabel")
        self.horizontalLayout_44.addWidget(self.addSpeedLabel)
        self.addSpeedLineEdit = QtWidgets.QLineEdit(self.layoutWidget6)
        self.addSpeedLineEdit.setObjectName("addSpeedLineEdit")
        self.horizontalLayout_44.addWidget(self.addSpeedLineEdit)
        self.verticalLayout_28.addLayout(self.horizontalLayout_44)
        self.verticalLayout_29.addLayout(self.verticalLayout_28)
        self.addButton = QtWidgets.QPushButton(self.layoutWidget6)
        self.addButton.setObjectName("addButton")
        self.addButton.clicked.connect(self.addButtonCallback)
        self.verticalLayout_29.addWidget(self.addButton)
        self.horizontalLayout_45.addLayout(self.verticalLayout_29)
        self.pointsPlainTextEdit = QtWidgets.QPlainTextEdit(self.SetPoints)
        self.pointsPlainTextEdit.setGeometry(QtCore.QRect(20, 230, 631, 181))
        self.pointsPlainTextEdit.setObjectName("pointsPlainTextEdit")
        self.startPointButton = QtWidgets.QPushButton(self.SetPoints)
        self.startPointButton.setGeometry(QtCore.QRect(20, 200, 89, 25))
        self.startPointButton.setObjectName("startPointButton")
        self.startPointButton.clicked.connect(self.startPointCallback)
        self.addGenerateGcodeButton = QtWidgets.QPushButton(self.SetPoints)
        self.addGenerateGcodeButton.setGeometry(QtCore.QRect(120, 200, 121, 25))
        self.addGenerateGcodeButton.setObjectName("addGenerateGcodeButton")
        self.addGenerateGcodeButton.clicked.connect(self.addGenerateGcodeButtonCallback)
        self.addProgressBar = QtWidgets.QProgressBar(self.SetPoints)
        self.addProgressBar.setGeometry(QtCore.QRect(250, 200, 401, 23))
        self.addProgressBar.setProperty("value", 0)
        self.addProgressBar.setObjectName("addProgressBar")
        self.tabWidget.addTab(self.SetPoints, "")
        self.layoutWidget7 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget7.setGeometry(QtCore.QRect(20, 20, 231, 471))
        self.layoutWidget7.setObjectName("layoutWidget7")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.layoutWidget7)
        self.verticalLayout_6.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        self.connectButton = QtWidgets.QPushButton(self.layoutWidget7)
        self.connectButton.setAutoDefault(True)
        self.connectButton.setObjectName("connectButton")
        self.connectButton.clicked.connect(self.connectCallback)
        self.verticalLayout_6.addWidget(self.connectButton)
        self.unlockButton = QtWidgets.QPushButton(self.layoutWidget7)
        self.unlockButton.setEnabled(False)
        self.unlockButton.setAutoDefault(True)
        self.unlockButton.setObjectName("unlockButton")
        self.unlockButton.clicked.connect(self.unlockCallback)
        self.verticalLayout_6.addWidget(self.unlockButton)
        self.homeButton = QtWidgets.QPushButton(self.layoutWidget7)
        self.homeButton.setEnabled(False)
        self.homeButton.setAutoDefault(True)
        self.homeButton.setObjectName("homeButton")
        self.homeButton.clicked.connect(self.homeCallBack)
        self.verticalLayout_6.addWidget(self.homeButton)
        self.hButton = QtWidgets.QPushButton(self.layoutWidget7)
        self.hButton.setEnabled(False)
        self.hButton.setObjectName("hButton")
        self.verticalLayout_6.addWidget(self.hButton)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.Jogging = QtWidgets.QGroupBox(self.layoutWidget7)
        self.Jogging.setObjectName("Jogging")
        self.layoutWidget8 = QtWidgets.QWidget(self.Jogging)
        self.layoutWidget8.setGeometry(QtCore.QRect(10, 30, 211, 171))
        self.layoutWidget8.setObjectName("layoutWidget8")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.layoutWidget8)
        self.verticalLayout_4.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.verticalLayout_4.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout()
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setSizeConstraint(QtWidgets.QLayout.SetDefaultConstraint)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.backXButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.backXButton.setEnabled(False)
        self.backXButton.setObjectName("backXButton")
        self.backXButton.pressed.connect(self.backXCallback)
        self.backXButton.released.connect(self.releasedBackXCallback)
        self.horizontalLayout_2.addWidget(self.backXButton)
        self.forwardXButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.forwardXButton.setEnabled(False)
        self.forwardXButton.setObjectName("forwardXButton")
        self.forwardXButton.pressed.connect(self.forwardXCallback)
        self.forwardXButton.released.connect(self.releasedForwardXCallback)
        self.horizontalLayout_2.addWidget(self.forwardXButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.backYButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.backYButton.setEnabled(False)
        self.backYButton.setObjectName("backYButton")
        self.backYButton.pressed.connect(self.backYCallback)
        self.backYButton.released.connect(self.releasedBackYCallback)
        self.horizontalLayout_3.addWidget(self.backYButton)
        self.forwardYButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.forwardYButton.setEnabled(False)
        self.forwardYButton.setObjectName("forwardYButton")
        self.forwardYButton.pressed.connect(self.forwardYCallback)
        self.forwardYButton.released.connect(self.releasedForwardYCallback)
        self.horizontalLayout_3.addWidget(self.forwardYButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.backZButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.backZButton.setEnabled(False)
        self.backZButton.setObjectName("backZButton")
        self.backZButton.pressed.connect(self.backZCallback)
        self.backZButton.released.connect(self.releasedBackZCallback)
        self.horizontalLayout_4.addWidget(self.backZButton)
        self.forwardZButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.forwardZButton.setEnabled(False)
        self.forwardZButton.setObjectName("forwardZButton")
        self.forwardZButton.pressed.connect(self.forwardZCallback)
        self.forwardZButton.released.connect(self.releasedForwardZCallback)
        self.horizontalLayout_4.addWidget(self.forwardZButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.backBButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.backBButton.setEnabled(False)
        self.backBButton.setObjectName("backBButton")
        self.backBButton.pressed.connect(self.backBCallback)
        self.backBButton.released.connect(self.releasedBackBCallback)
        self.horizontalLayout_5.addWidget(self.backBButton)
        self.forwardBButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.forwardBButton.setEnabled(False)
        self.forwardBButton.setObjectName("forwardBButton")
        self.forwardBButton.pressed.connect(self.forwardBCallback)
        self.forwardBButton.released.connect(self.releasedForwardBCallback)
        self.horizontalLayout_5.addWidget(self.forwardBButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.backCButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.backCButton.setEnabled(False)
        self.backCButton.setObjectName("backCButton")
        self.backCButton.pressed.connect(self.backCCallback)
        self.backCButton.released.connect(self.releasedBackCCallback)
        self.horizontalLayout_6.addWidget(self.backCButton)
        self.forwardCButton = QtWidgets.QPushButton(self.layoutWidget8)
        self.forwardCButton.setEnabled(False)
        self.forwardCButton.setObjectName("forwardCButton")
        self.forwardCButton.pressed.connect(self.forwardCCallback)
        self.forwardCButton.released.connect(self.releasedForwardCCallback)
        self.horizontalLayout_6.addWidget(self.forwardCButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_6)
        self.verticalLayout_4.addLayout(self.verticalLayout_3)
        self.stepLabel = QtWidgets.QLabel(self.Jogging)
        self.stepLabel.setGeometry(QtCore.QRect(10, 240, 81, 17))
        self.stepLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignVCenter)
        self.stepLabel.setObjectName("stepLabel")
        self.stepSpinBox = QtWidgets.QSpinBox(self.Jogging)
        self.stepSpinBox.setEnabled(False)
        self.stepSpinBox.setGeometry(QtCore.QRect(90, 235, 131, 31))
        self.stepSpinBox.setObjectName("stepSpinBox")
        self.layoutWidget9 = QtWidgets.QWidget(self.Jogging)
        self.layoutWidget9.setGeometry(QtCore.QRect(10, 200, 131, 27))
        self.layoutWidget9.setObjectName("layoutWidget9")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.layoutWidget9)
        self.horizontalLayout_7.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.feedLabel = QtWidgets.QLabel(self.layoutWidget9)
        self.feedLabel.setObjectName("feedLabel")
        self.horizontalLayout_7.addWidget(self.feedLabel)
        self.feedHorizontalSlider = QtWidgets.QSlider(self.layoutWidget9)
        self.feedHorizontalSlider.setEnabled(False)
        self.feedHorizontalSlider.setOrientation(QtCore.Qt.Horizontal)
        self.feedHorizontalSlider.setObjectName("feedHorizontalSlider")
        self.feedHorizontalSlider.valueChanged.connect(self.valueChangeCallback)
        self.horizontalLayout_7.addWidget(self.feedHorizontalSlider)
        self.layoutWidget10 = QtWidgets.QWidget(self.Jogging)
        self.layoutWidget10.setGeometry(QtCore.QRect(10, 280, 213, 25))
        self.layoutWidget10.setObjectName("layoutWidget10")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout(self.layoutWidget10)
        self.horizontalLayout_37.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout_37.setSpacing(45)
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.continuousRadioButton = QtWidgets.QRadioButton(self.layoutWidget10)
        self.continuousRadioButton.setEnabled(False)
        self.continuousRadioButton.setObjectName("continuousRadioButton")
        self.horizontalLayout_37.addWidget(self.continuousRadioButton)
        self.onceRadioButton = QtWidgets.QRadioButton(self.layoutWidget10)
        self.onceRadioButton.setEnabled(False)
        self.onceRadioButton.setChecked(True)
        self.onceRadioButton.setObjectName("onceRadioButton")
        self.horizontalLayout_37.addWidget(self.onceRadioButton)
        self.feedLineEdit = QtWidgets.QLineEdit(self.Jogging)
        self.feedLineEdit.setGeometry(QtCore.QRect(148, 200, 71, 25))
        self.feedLineEdit.setObjectName("feedLineEdit")
        self.verticalLayout_5.addWidget(self.Jogging)
        self.setButton = QtWidgets.QPushButton(self.layoutWidget7)
        self.setButton.setEnabled(False)
        self.setButton.setAutoDefault(True)
        self.setButton.setObjectName("setButton")
        self.setButton.clicked.connect(self.setCallback)
        self.verticalLayout_5.addWidget(self.setButton)
        self.verticalLayout_6.addLayout(self.verticalLayout_5)
        self.Serial = QtWidgets.QGroupBox(self.centralwidget)
        self.Serial.setGeometry(QtCore.QRect(20, 500, 931, 201))
        self.Serial.setObjectName("Serial")
        self.layoutWidget11 = QtWidgets.QWidget(self.Serial)
        self.layoutWidget11.setGeometry(QtCore.QRect(10, 30, 801, 161))
        self.layoutWidget11.setObjectName("layoutWidget11")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.layoutWidget11)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.cmdLabel = QtWidgets.QLabel(self.layoutWidget11)
        self.cmdLabel.setAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignTop)
        self.cmdLabel.setObjectName("cmdLabel")
        self.verticalLayout.addWidget(self.cmdLabel)
        self.outputLabel = QtWidgets.QLabel(self.layoutWidget11)
        self.outputLabel.setAlignment(QtCore.Qt.AlignLeading|QtCore.Qt.AlignLeft|QtCore.Qt.AlignTop)
        self.outputLabel.setIndent(0)
        self.outputLabel.setObjectName("outputLabel")
        self.verticalLayout.addWidget(self.outputLabel)
        self.horizontalLayout.addLayout(self.verticalLayout)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.cmdLineEdit = QtWidgets.QLineEdit(self.layoutWidget11)
        self.cmdLineEdit.setObjectName("cmdLineEdit")
        self.verticalLayout_2.addWidget(self.cmdLineEdit)
        self.outputPlainTextEdit = QtWidgets.QPlainTextEdit(self.layoutWidget11)
        self.outputPlainTextEdit.setObjectName("outputPlainTextEdit")
        self.verticalLayout_2.addWidget(self.outputPlainTextEdit)
        self.horizontalLayout.addLayout(self.verticalLayout_2)
        self.sendButton = QtWidgets.QPushButton(self.Serial)
        self.sendButton.setEnabled(False)
        self.sendButton.setGeometry(QtCore.QRect(820, 30, 89, 25))
        self.sendButton.setAutoDefault(True)
        self.sendButton.setObjectName("sendButton")
        self.sendButton.clicked.connect(self.sendCallback)
        self.statusLabel = QtWidgets.QLabel(self.Serial)
        self.statusLabel.setGeometry(QtCore.QRect(81, 1, 47, 17))
        self.statusLabel.setObjectName("statusLabel")
        self.idleLabel = QtWidgets.QLabel(self.Serial)
        self.idleLabel.setGeometry(QtCore.QRect(139, 1, 221, 17))
        self.idleLabel.setObjectName("idleLabel")
        self.mposLabel = QtWidgets.QLabel(self.centralwidget)
        self.mposLabel.setGeometry(QtCore.QRect(100, 710, 571, 21))
        self.mposLabel.setObjectName("mposLabel")
        self.layoutWidget12 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget12.setGeometry(QtCore.QRect(0, 0, 2, 2))
        self.layoutWidget12.setObjectName("layoutWidget12")
        self.verticalLayout_30 = QtWidgets.QVBoxLayout(self.layoutWidget12)
        self.verticalLayout_30.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.layoutWidget13 = QtWidgets.QWidget(self.centralwidget)
        self.layoutWidget13.setGeometry(QtCore.QRect(0, 0, 2, 2))
        self.layoutWidget13.setObjectName("layoutWidget13")
        self.verticalLayout_31 = QtWidgets.QVBoxLayout(self.layoutWidget13)
        self.verticalLayout_31.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.refreshButton = QtWidgets.QPushButton(self.centralwidget)
        self.refreshButton.setEnabled(False)
        self.refreshButton.setGeometry(QtCore.QRect(20, 710, 71, 21))
        self.refreshButton.setObjectName("refreshButton")
        self.refreshButton.clicked.connect(self.refreshCallback)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 988, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)#
        ####################################################
        ####################################################
        #My Initializations
        self.pos_offsets = [0,0,0] #central position z: 405 (-47) y:764 (-2.03) x:700 (-5.05)
        self.set_offsets = [0,0,0]
        self.abs_offset = [0, 0, 0] #corresponding x,y,z offset #joints are at X530,Y750,Z225
        self.set_world_frame = [0,0,0]
        self.calculated_plan = False
        self.dumper_file = None
        self.full_list = []
        self.file_to_save  = False
        self.progress_value = 0
        self.SerialConnected = False
        self.secuence_counter = 1
        self.startButtonPressed = False
        self.cartesianStartButtonPressed = False
        self.coming_from_continuous_state = False
        self.joggingCounter = 0
        self.temp_x = []
        self.temp_y = []
        self.temp_z = []
        self.temp_b = []
        self.temp_c = []
        self.checkCartesian = False
        self.cartesian_gcode = []


    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.xmmLabel.setText(_translate("MainWindow", "X mm"))
        self.ymmLabel.setText(_translate("MainWindow", "Y mm"))
        self.zmmLabel.setText(_translate("MainWindow", "Z mm"))
        self.rollLabel.setText(_translate("MainWindow", "Roll deg"))
        self.pitchLabel.setText(_translate("MainWindow", "Pitch deg"))
        self.yawLabel.setText(_translate("MainWindow", "Yaw deg"))
        self.xCurrentJointsLabel.setText(_translate("MainWindow", "Joint 1"))
        self.yCurrentJointsLabel.setText(_translate("MainWindow", "Joint 2"))
        self.zCurrentJointsLabel.setText(_translate("MainWindow", "Joint 3"))
        self.aCurrentJointsLabel.setText(_translate("MainWindow", "Joint 4"))
        self.bCurrentJointsLabel.setText(_translate("MainWindow", "Joint 5"))
        self.cCurrentJointsLabel.setText(_translate("MainWindow", "Joint 6"))
        self.xCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 1"))
        self.yCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 2"))
        self.zCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 3"))
        self.aCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 4"))
        self.bCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 5"))
        self.cCalculatedJointsLabel.setText(_translate("MainWindow", "Joint 6"))
        self.calculateButton.setText(_translate("MainWindow", "Calculate"))
        self.gcodeLabel.setText(_translate("MainWindow", "Gcode"))
        self.simSpeedlabel.setText(_translate("MainWindow", "Speed"))
        self.executeButton.setText(_translate("MainWindow", "Execute"))
        self.desiredPoseLabel.setText(_translate("MainWindow", "Desired Pose"))
        self.currentJointsLabel.setText(_translate("MainWindow", "Current Joints"))
        self.calculatedJointsLabel.setText(_translate("MainWindow", "Calculated Joints"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.CalculateJoints), _translate("MainWindow", "Calculate Joints"))
        self.groupBox_5.setTitle(_translate("MainWindow", "Desired Pose"))
        self.xmmCartesianLabel.setText(_translate("MainWindow", "X mm"))
        self.rollCartesianLabel.setText(_translate("MainWindow", "Roll"))
        self.ymmCartesianLabel.setText(_translate("MainWindow", "Y mm"))
        self.pitchCartesianLabel.setText(_translate("MainWindow", "Pitch"))
        self.zmmCartesianLabel.setText(_translate("MainWindow", "Z mm"))
        self.yawCartesianLabel.setText(_translate("MainWindow", "Yaw"))
        self.cartesianModecheckBox.setText(_translate("MainWindow", "Cartesian Mode"))
        self.checkCartesianButton.setText(_translate("MainWindow", "Check"))
        self.desirePoseAddButton.setText(_translate("MainWindow", "Add"))
        self.cartesianSimSpeedlabel.setText(_translate("MainWindow", "Sim Speed"))
        self.speedCartesianLabel.setText(_translate("MainWindow", "Speed"))
        self.samplesCartesianLabel.setText(_translate("MainWindow", "Samples"))
        self.groupBox_6.setTitle(_translate("MainWindow", "Trajectory Points"))
        self.cartesianTrajectoryLoadButton.setText(_translate("MainWindow", "Load"))
        self.cartesianTrajectorySaveButton.setText(_translate("MainWindow", "Save"))
        self.cartesianTrajectoryExecuteButton.setText(_translate("MainWindow", "Execute"))
        self.cartesianTrajectoryPointsStartButton.setText(_translate("MainWindow", "Start"))
        self.groupBox_7.setTitle(_translate("MainWindow", "Gcode"))
        self.cartesianGcodeGenerateButton.setText(_translate("MainWindow", "Generate"))
        self.cartesianGcodeSaveButton.setText(_translate("MainWindow", "Save"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab), _translate("MainWindow", "Cartesian Plan"))
        self.offset_Label.setText(_translate("MainWindow", "Offset"))
        self.xOffsetLabel.setText(_translate("MainWindow", "X Offset"))
        self.yOffsetLabel.setText(_translate("MainWindow", "Y Offset"))
        self.zOffsetLabel.setText(_translate("MainWindow", "Z Offset"))
        self.setOffsetButton.setText(_translate("MainWindow", "Set Offset"))
        self.defaultButton.setText(_translate("MainWindow", "Default"))
        self.custom1Button.setText(_translate("MainWindow", "Custom1"))
        self.custom2Button.setText(_translate("MainWindow", "Custom2"))
        self.worldFrameLabel.setText(_translate("MainWindow", "World Frame"))
        self.xFrameLabel.setText(_translate("MainWindow", "X"))
        self.yFrameLabel.setText(_translate("MainWindow", "Y"))
        self.zFrameLabel.setText(_translate("MainWindow", "Z"))
        self.setFrameButton.setText(_translate("MainWindow", "Set Frame"))
        self.defaultFrameButton.setText(_translate("MainWindow", "Default"))
        self.customFrame1Button.setText(_translate("MainWindow", "Custom1"))
        self.customFrame2Button.setText(_translate("MainWindow", "Custom2"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Offsets), _translate("MainWindow", "Offsets"))
        self.dumperFileButton.setText(_translate("MainWindow", "Dumper File"))
        self.chosenFilelabel.setText(_translate("MainWindow", "Chosen File"))
        self.generateGcodeButton.setText(_translate("MainWindow", "Generate Gcode"))
        self.saveButton.setText(_translate("MainWindow", "Save"))
        self.updateGcodeButton.setText(_translate("MainWindow", "Update Gcode"))
        self.groupBox.setTitle(_translate("MainWindow", "Speed Configuration"))
        self.speedDefaultRadioButton.setText(_translate("MainWindow", "Default"))
        self.speedRelativeRadioButton.setText(_translate("MainWindow", "Relative(%)"))
        self.speedAbsoluteRadioButton.setText(_translate("MainWindow", "Absolute"))
        self.speedFlabel.setText(_translate("MainWindow", "F"))
        self.groupBox_3.setTitle(_translate("MainWindow", "Mode Configuration"))
        self.modeDefaultRadioButton.setText(_translate("MainWindow", "Default"))
        self.moveBackRadioButton.setText(_translate("MainWindow", "Move Back"))
        self.groupBox_4.setTitle(_translate("MainWindow", "Filter"))
        self.onLinear5DCheckBox.setText(_translate("MainWindow", "onLinear5D"))
        self.onRapid5DCheckBox.setText(_translate("MainWindow", "onRapid5D"))
        self.allCheckBox.setText(_translate("MainWindow", "All"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.Gcode), _translate("MainWindow", "Gcode Generation"))
        self.calculateExtremesButton.setText(_translate("MainWindow", "Calculate Extremes"))
        self.loadGcodeButton.setText(_translate("MainWindow", "Load Gcode"))
        self.xMinLabel.setText(_translate("MainWindow", "X Min"))
        self.xMaxLabel.setText(_translate("MainWindow", "X Max"))
        self.yMinLabel.setText(_translate("MainWindow", "Y Min"))
        self.yMaxLabel.setText(_translate("MainWindow", "Y Max"))
        self.zMinLabel.setText(_translate("MainWindow", "Z min"))
        self.zMaxLabel.setText(_translate("MainWindow", "Z Max"))
        self.sendGcodeButton.setText(_translate("MainWindow", "Send Gcode"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.LoadGcode), _translate("MainWindow", "Load Gcode"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Add Points"))
        self.addXLabel.setText(_translate("MainWindow", "X"))
        self.addYLabel.setText(_translate("MainWindow", "Y"))
        self.addZLabel.setText(_translate("MainWindow", "Z"))
        self.addSamplesLabel.setText(_translate("MainWindow", "Samples"))
        self.addPitchLabel.setText(_translate("MainWindow", "Pitch"))
        self.addYawLabel.setText(_translate("MainWindow", "Yaw"))
        self.addSpeedLabel.setText(_translate("MainWindow", "Speed"))
        self.addButton.setText(_translate("MainWindow", "Add"))
        self.startPointButton.setText(_translate("MainWindow", "Start Point"))
        self.addGenerateGcodeButton.setText(_translate("MainWindow", "Generate Gcode"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.SetPoints), _translate("MainWindow", "Set Points"))
        self.connectButton.setText(_translate("MainWindow", "Connect"))
        self.unlockButton.setText(_translate("MainWindow", "Unlock ($X)"))
        self.homeButton.setText(_translate("MainWindow", "Home (G01X0Y0Z0B0C0)"))
        self.hButton.setText(_translate("MainWindow", "$H"))
        self.Jogging.setTitle(_translate("MainWindow", "Jogging"))
        self.backXButton.setText(_translate("MainWindow", "-X"))
        self.forwardXButton.setText(_translate("MainWindow", "X"))
        self.backYButton.setText(_translate("MainWindow", "-Y"))
        self.forwardYButton.setText(_translate("MainWindow", "Y"))
        self.backZButton.setText(_translate("MainWindow", "-Z"))
        self.forwardZButton.setText(_translate("MainWindow", "Z"))
        self.backBButton.setText(_translate("MainWindow", "-B"))
        self.forwardBButton.setText(_translate("MainWindow", "B"))
        self.backCButton.setText(_translate("MainWindow", "-C"))
        self.forwardCButton.setText(_translate("MainWindow", "C"))
        self.stepLabel.setText(_translate("MainWindow", "Step in mm"))
        self.feedLabel.setText(_translate("MainWindow", "F"))
        self.continuousRadioButton.setText(_translate("MainWindow", "Continuous"))
        self.onceRadioButton.setText(_translate("MainWindow", "Once"))
        self.setButton.setText(_translate("MainWindow", "Set"))
        self.Serial.setTitle(_translate("MainWindow", "Serial"))
        self.cmdLabel.setText(_translate("MainWindow", "CMD"))
        self.outputLabel.setText(_translate("MainWindow", "OUTPUT"))
        self.sendButton.setText(_translate("MainWindow", "Send"))
        self.statusLabel.setText(_translate("MainWindow", "Status:"))
        self.idleLabel.setText(_translate("MainWindow", "Idle"))
        self.mposLabel.setText(_translate("MainWindow", "Mpos:"))
        self.refreshButton.setText(_translate("MainWindow", "Refresh"))

    def showMessageBox(title=None, text="", icon="NoIcon", buttons=False, buttonsText=[],callback=None):
        qmb = QMessageBox()
        qmb.setText(text)
        #qmb.setWindowTitle(title)
        if icon == "NoIcon":
            qmb.setIcon(QMessageBox.NoIcon)
        if icon == "Information":
            qmb.setIcon(QMessageBox.Information)
        if icon == "Warning":
            qmb.setIcon(QMessageBox.Warning)
        if icon == "Critical":
            qmb.setIcon(QMessageBox.Critical)
        if icon == "Question":
            qmb.setIcon(QMessageBox.Question)

        if buttons == True:
            qmb.setStandardButtons(QMessageBox.Ok | QMessageBox.Cancel)
            if len(buttonsText) == 2:
                qmb.button(QMessageBox.Ok).setText(buttonsText[0])
                qmb.button(QMessageBox.Cancel).setText(buttonsText[1])
        else:
            if len(buttonsText) == 1:
                qmb.setStandardButtons(QMessageBox.Ok)
                qmb.button(QMessageBox.Ok).setText(buttonsText[0])

        if qmb.exec() == QMessageBox.Ok:
            if callback:
                return callback()
            else:
                return None
        else:
            return None

    def calculateCallback(self):
        try:
            x = float(self.xmmLineEdit.text())
            y = float(self.ymmLineEdit.text())
            z = float(self.zmmLineEdit.text())
            pitch = float(self.pitchLineEdit.text())
            yaw = float(self.yawLineEdit.text())
            roll = float(self.rollLineEdit.text())
        except ValueError:
            self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
            return None


        x = x + self.pos_offsets[0] + self.set_offsets[0] +self.set_world_frame[0]
        y = y + self.pos_offsets[1] + self.set_offsets[1] +self.set_world_frame[1]
        z = z + self.pos_offsets[2] + self.set_offsets[2] +self.set_world_frame[2]

        GLOBAL_CALCULATED_JOINTS[0] = x
        GLOBAL_CALCULATED_JOINTS[1] = y
        GLOBAL_CALCULATED_JOINTS[2] = z
        GLOBAL_CALCULATED_JOINTS[3] = roll
        GLOBAL_CALCULATED_JOINTS[4] = pitch
        GLOBAL_CALCULATED_JOINTS[5] = yaw

        rospy.wait_for_service('/calc_pose')
        service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)

        try:
            request = CalculateJoints()
            request.x_input = x
            request.y_input = y
            request.z_input = z
            request.roll_input = roll
            request.pitch_input = pitch
            request.yaw_input = yaw
            request.check = 2
            response = service_conn(request.x_input, request.y_input, request.z_input, request.roll_input, request.pitch_input, request.yaw_input, request.check)
            #print(response)
        except rospy.ServiceException as exc:
            print("Service did not process request: " + str(exc))

        if response.success:
            #display the data received from the service
            #current_joints
            self.xCurrentJointsLineEdit.setText(str(round(response.joints[0]-self.abs_offset[0]-self.set_world_frame[0],2)))
            self.yCurrentJointsLineEdit.setText(str(round(response.joints[1]-self.abs_offset[1]-self.set_world_frame[1],2)))
            self.zCurrentJointsLineEdit.setText(str(round(response.joints[2]-self.abs_offset[2]-self.set_world_frame[2],2)))
            self.aCurrentJointsLineEdit.setText(str(round(response.joints[3],2)))
            self.bCurrentJointsLineEdit.setText(str(round(response.joints[4],2)))
            self.cCurrentJointsLineEdit.setText(str(round(response.joints[5],2)))

            #calculated joints
            self.xCalculatedJointsLineEdit.setText(str(round(response.joints[6]-self.abs_offset[0]-self.set_world_frame[0],2)))
            self.yCalculatedJointsLineEdit.setText(str(round(response.joints[7]-self.abs_offset[1]-self.set_world_frame[1],2)))
            self.zCalculatedJointsLineEdit.setText(str(round(response.joints[8]-self.abs_offset[2]-self.set_world_frame[2],2)))
            self.aCalculatedJointsLineEdit.setText(str(round(response.joints[9],2)))
            self.bCalculatedJointsLineEdit.setText(str(round(response.joints[10],2)))
            self.cCalculatedJointsLineEdit.setText(str(round(response.joints[11],2)))

            # A = self.xCalculatedJointsLineEdit.text()
            # B = self.yCalculatedJointsLineEdit.text()
            # C = self.zCalculatedJointsLineEdit.text()
            # D = self.aCalculatedJointsLineEdit.text()
            # E = self.bCalculatedJointsLineEdit.text()
            # H = self.cCalculatedJointsLineEdit.text()



            self.gcodeLineEdit.setText(f"G01A{self.xCalculatedJointsLineEdit.text()}B{self.yCalculatedJointsLineEdit.text()}C{self.zCalculatedJointsLineEdit.text()}D{self.aCalculatedJointsLineEdit.text()}E{self.bCalculatedJointsLineEdit.text()}H{self.cCalculatedJointsLineEdit.text()}")

            self.calculated_plan = True
        else:
            self.showMessageBox(text="No Motion Plan Found", icon="Critical")
            return None


    def executeCallback(self):
        if self.calculated_plan:

            self.thread_execute = QThread()
            self.worker_execute = Worker()
            self.worker_execute.moveToThread(self.thread_execute)

            self.thread_execute.started.connect(self.worker_execute.call_action_execution)
            self.worker_execute.finished.connect(self.thread_execute.quit)
            self.worker_execute.finished.connect(self.worker_execute.deleteLater)
            self.thread_execute.finished.connect(self.thread_execute.deleteLater)
            #self.worker_execute.progress.connect(self.reportProgress_execution)

            self.thread_execute.start()
            ####START SERVICE CALL#######
            # rospy.wait_for_service('/execute_pose')
            # service_conn = rospy.ServiceProxy('/execute_pose', SetBool)
            #
            # try:
            #     request = SetBool()
            #     request.data = True
            #     response = service_conn(request.data)
            #     #print(response)
            # except rospy.ServiceException as exc:
            #     print("Service did not process request: " + str(exc))
            ######END SERVICE CALL#######

            self.calculated_plan = False
        else:
            self.showMessageBox(text="There is no calculated trajectory plan", icon="Critical")
            return None

    def feedback_callback(self,msg):
        print(msg.feedback)

    def set_offsetCallback(self, *args):
        try:
            self.set_offsets[0] = float(self.xOffsetLineEdit.text())
            self.set_offsets[1] = float(self.yOffsetLineEdit.text())
            self.set_offsets[2] = float(self.zOffsetLineEdit.text())
        except ValueError:
            self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
            return None

    def setDefaultCallback(self):
        defalutValue = 0
        self.xOffsetLineEdit.setText(str(defalutValue))
        self.yOffsetLineEdit.setText(str(defalutValue))
        self.zOffsetLineEdit.setText(str(defalutValue))
        #self.set_offsets[0] = defalutValue
        #self.set_offsets[1] = defalutValue
        #self.set_offsets[2] = defalutValue

    def custom1Callback(self):
        R = 40
        yaw = [i for i in range(0,360,1)]
        x = [round(R*math.cos(math.radians(i)),2) for i in yaw]
        y = [round(R*math.sin(math.radians(i)),2) for i in yaw]
        speed = 1500
        samples = 1
        z = -10
        pitch = 45

        if self.startButtonPressed:
            point1 = f": X{0} Y{0} Z{z} PITCH{0} YAW{0} SPEED{1500} SAMPLES{1}"
            point2 = f": X{0} Y{0} Z{z} PITCH{pitch} YAW{0} SPEED{1500} SAMPLES{10}"
            self.pointsPlainTextEdit.insertPlainText(point1 + "\n")
            self.pointsPlainTextEdit.insertPlainText(point2 + "\n")

            for i in range(len(x)):
                points = f"{i}: X{x[i]} Y{y[i]} Z{z} PITCH{pitch} YAW{yaw[i]} SPEED{speed} SAMPLES{samples}"
                self.pointsPlainTextEdit.insertPlainText(points + "\n")
                self.secuence_counter+=1

        else:
            self.showMessageBox(text="Press the start button first", icon="Critical")

    def custom2ButtonCallback(self):
        R = 40
        pitch = [i for i in range(0,91,30)]
        x = [round(R*math.sin(math.radians(i)),2) for i in pitch]
        z = [round(R*math.cos(math.radians(i)),2) for i in pitch]
        speed = 2500
        samples = 10
        y = 0
        yaw = 0

        if self.startButtonPressed:
            #point1 = f": X{0} Y{0} Z{z} PITCH{0} YAW{0} SPEED{1500} SAMPLES{1}"
            #point2 = f": X{0} Y{0} Z{z} PITCH{pitch} YAW{0} SPEED{1500} SAMPLES{10}"
            #self.pointsPlainTextEdit.insertPlainText(point1 + "\n")
            #self.pointsPlainTextEdit.insertPlainText(point2 + "\n")

            for i in range(len(x)):
                points = f"{i}: X{x[i]} Y{y} Z{z[i]} PITCH{pitch[i]} YAW{yaw} SPEED{speed} SAMPLES{samples}"
                self.pointsPlainTextEdit.insertPlainText(points + "\n")
                points = f"{i}: X{0} Y{y} Z{0} PITCH{pitch[i]} YAW{yaw} SPEED{speed} SAMPLES{1}"
                self.pointsPlainTextEdit.insertPlainText(points + "\n")
                points = f"{i}: X{x[i]} Y{y} Z{z[i]} PITCH{pitch[i]} YAW{yaw} SPEED{speed} SAMPLES{1}"
                self.pointsPlainTextEdit.insertPlainText(points + "\n")
                self.secuence_counter+=1

        else:
            self.showMessageBox(text="Press the start button first", icon="Critical")

    def setFrameButtonCallback(self):
        self.set_world_frame[0] = float(self.xFrameLineEdit.text())
        self.set_world_frame[1] = float(self.yFrameLineEdit.text())
        self.set_world_frame[2] = float(self.zFrameLineEdit.text())
        #print(f"setting world frame: x:{self.set_world_frame[0]} y:{self.set_world_frame[1]} z:{self.set_world_frame[2]}")

    def defaultFrameCallback(self):
        defaultVal = "0"
        self.xFrameLineEdit.setText(defaultVal)
        self.yFrameLineEdit.setText(defaultVal)
        self.zFrameLineEdit.setText(defaultVal)



    def file_chooser(self):
        filechooser.open_file(on_selection=self.selected)

    def selected(self, selection):
        self.dumper_file = selection[0]
        self.chosenFilelabel.setText(self.dumper_file[len(self.dumper_file)-self.dumper_file[::-1].find("/"):])


    def check_filter(self,line,*mode):
        name = mode[0][0]
        state = mode[0][1]
        if state:
            if line.find(name)>0:
                return name
            else:
                return "Not Found"
        else:
            return "Not Found"

    def generate_gcodeCallback(self):

        myatan = lambda x,y: numpy.pi*(1.0-0.5*(1+numpy.sign(x))*(1-numpy.sign(y**2))\
                 -0.25*(2+numpy.sign(x))*numpy.sign(y))\
                 -numpy.sign(x*y)*numpy.arctan((numpy.abs(x)-numpy.abs(y))/(numpy.abs(x)+numpy.abs(y)))

        lines = []
        self.full_list = []
        try:
            with open(self.dumper_file) as f:
                lines= f.readlines()


            counter_line = 0
            percentage = 0
            count = 0
            self.progress_value = 0
            x_offset = self.abs_offset[0] + self.set_world_frame[0]
            y_offset = self.abs_offset[1] + self.set_world_frame[1]
            z_offset = self.abs_offset[2] + self.set_world_frame[2]

            #Setting the Filters
            if (not self.onRapid5DCheckBox.isChecked()) and (not self.onLinear5DCheckBox.isChecked()) and (not self.allCheckBox.isChecked()):
                self.showMessageBox(text="Make Sure To Check At Least One Filter", icon="Critical")
                return None

            mode_onRapid5D = ("onRapid5D(",self.onRapid5DCheckBox.isChecked())
            mode_onLinear5D = ("onLinear5D(",self.onLinear5DCheckBox.isChecked())
            mode_all = self.allCheckBox.isChecked()
            if mode_all:
                mode_onLinear = ("onLinear(",True)
                mode_onRapid = ("onRapid(",True)
                mode_onCircular = ("onCircular(",True)
                mode_onRapid5D = ("onRapid5D(",True)
                mode_onLinear5D = ("onLinear5D(",True)
            else:
                mode_onLinear = ("onLinear(",False)
                mode_onRapid = ("onRapid(",False)
                mode_onCircular = ("onCircular(",False)

            modes = [mode_onLinear5D, mode_onRapid5D, mode_onLinear, mode_onRapid, mode_onCircular]

            #counter = 0
            total_lines = 0

            for line in lines:
                cw= True
                found_functions = []
                for i in modes:
                    mode_name = self.check_filter(line, i)
                    if mode_name != "Not Found":
                        found_functions.append(mode_name)

                if found_functions:
                    x = [line]
                    start = 0
                    while True:
                        index_e = x[0].find("e-", start)
                        if index_e <0:
                            break
                        index_next_comma =  x[0].find(",",index_e)

                        for i in range(index_e, 0,-1):
                            if  x[0][i] == "," or x[0][i] == "(":
                                index_prev_comma = i
                                break
                            else:
                                index_prev_comma = -1

                        x[0] =  x[0].replace(x[0][index_prev_comma:index_next_comma], ", 0.0001")
                        start = index_e +1
                #
                #     print(x[0])
                    if str(x[0]).find("false") > 0:
                        cw = False

                    pattern = re.compile(r'([.-]|)((\d*\.\d*)|(\d*))')
                    matches = pattern.finditer(str(x[0]))
                    tcp_coordinates = [match.group(0) for match in matches]
                    tcp_coordinates = [elem for elem in tcp_coordinates if elem!=""]
                    #print(tcp_coordinates)
                    #print(found_functions)
                    if len(tcp_coordinates) >1:
                        if "onLinear(" in found_functions or "onRapid(" in found_functions or "onCircular(" in found_functions:
                            del tcp_coordinates[0]
                        elif "onRapid5D(" in found_functions or "onLinear5D(" in found_functions:
                            del tcp_coordinates[0]
                            del tcp_coordinates[0]

                        #dump_test.append(tcp_coordinates)
                        tcp_coordinates = [round(float(elem), 6) for elem in tcp_coordinates]
                        if "onRapid5D(" in found_functions:
                            coordinate = [(round(math.degrees(myatan(tcp_coordinates[3], tcp_coordinates[4])), 6) , round(math.degrees(math.atan((math.sqrt( abs((tcp_coordinates[3])**2) + abs((tcp_coordinates[4])**2)))/tcp_coordinates[5])),2))]
                            list_coordinate = [coordinate[0][0],coordinate[0][1]] # yaw, pitch
                            self.full_list.append(tcp_coordinates + list_coordinate)
                            #print(f"Line Number:{counter} function(onRapid5D) x: {full_list[-1][0]} y: {full_list[-1][1]} z: {full_list[-1][2]} yaw: {full_list[-1][-2]} pitch: {full_list[-1][-1]}")
                            #counter +=1
                        elif "onLinear5D(" in found_functions:
                            coordinate = [(round(math.degrees(myatan(tcp_coordinates[3], tcp_coordinates[4])), 6) , round(math.degrees(math.atan((math.sqrt( abs((tcp_coordinates[3])**2) + abs((tcp_coordinates[4])**2)))/tcp_coordinates[5])),2))]
                            list_coordinate = [coordinate[0][0],coordinate[0][1]]
                            if math.isnan(coordinate[0][0]):
                                print(tcp_coordinates[4], tcp_coordinates[3])
                            self.full_list.append(tcp_coordinates + list_coordinate)
                            #print(f"Line Number:{counter} function(onLinear5D) x: {full_list[-1][0]} y: {full_list[-1][1]} z: {full_list[-1][2]} yaw: {full_list[-1][-2]} pitch: {full_list[-1][-1]} speed: {full_list[-1][6]}" )
                            #counter +=1
                        elif "onLinear(" in found_functions:
                            self.full_list.append(tcp_coordinates)
                            #print(f"Line Number:{counter} function(onLinear) x: {full_list[-1][0]} y: {full_list[-1][1]} z: {full_list[-1][2]} speed: {full_list[-1][3]}" )
                            #counter +=1

                        elif "onRapid(" in found_functions:
                            self.full_list.append(tcp_coordinates)
                            #print(f"Line Number:{counter} function(onRapid) x: {full_list[-1][0]} y: {full_list[-1][1]} z: {full_list[-1][2]}" )
                            #counter +=1

                        elif "onCircular(" in found_functions:
                            self.full_list.append(tcp_coordinates)
                            #print(f"Line Number:{counter} function(onCirular) clockwise: {cw} cx: {full_list[-1][0]} cy: {full_list[-1][1]} cz: {full_list[-1][2]} end_x: {full_list[-1][3]} end_y: {full_list[-1][4]} end_z: {full_list[-1][5]}" )
                            #counter +=1
                        total_lines +=1


            gcode = ""
            count = 1
            add_degrees = 0
            cyclic_count = 1

            for i in range(len(self.full_list)):
                abs_pos = [self.set_offsets[k] +self.pos_offsets[k] + self.full_list[i][k] for k in range(len(self.pos_offsets))] #[x,y,z] abs offset

                if i>=3 and len(self.full_list[i])>8:

                    #if abs(self.full_list[i][-2]- self.full_list[i-1][-2])>300:
                    cyclic_threshold = 280 #before 350
                    if (self.full_list[i][-2] - self.full_list[i-1][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] >cyclic_threshold) or (self.full_list[i][-2] - self.full_list[i-1][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] < -cyclic_threshold):
                        if self.moveBackRadioButton.isChecked():
                            m = math.tan(math.radians(self.full_list[i-1][-1])) #steigung
                            if m<1:
                                x_deviation = 100 #in mm
                            else:
                                x_deviation = 47.53*(m**(-0.98)) #in mm formula to make the x_deviation in dependance of the angle pitch

                            z_deviation = m*x_deviation # linear equation in mm
                            # print("m", m)
                            # print("x_dev: ",x_deviation)
                            # print("z_dev: ",z_deviation)
                            # print("b (degrees): ", self.full_list[i-1][-1])
                            # print("b readians: ", math.radians(self.full_list[i-1][-1]))

                            rospy.wait_for_service('/calc_pose')
                            service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)
                            try:
                                request = CalculateJoints()
                                request.x_input = self.set_offsets[0] +self.pos_offsets[0] + self.full_list[i-1][0] + z_deviation
                                #print(f"request x: ", request.x_input)
                                request.y_input = self.set_offsets[1] +self.pos_offsets[1] + self.full_list[i-1][1]
                                #print(f"request y: ", request.y_input)
                                request.z_input = self.set_offsets[2] +self.pos_offsets[2] + self.full_list[i-1][2] + x_deviation
                                #print(f"request z: ", request.z_input)
                                request.pitch_input = self.full_list[i-1][-1]
                                #print(f"request b: ", request.pitch_input)
                                request.yaw_input = self.full_list[i-1][-2]
                                #print(f"request c: ", request.yaw_input)
                                response = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                                #print(response)
                                if response.success:
                                    feed_rate = 2500
                                    #print(f"Completed Trajectory Planned And To Be Executed After {attempts} Attempts")
                                    #tutorial.execute_plan(cartesian_plan)
                                    #uncomment gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{round(response.joints[9],2)}F{feed_rate}\n"
                                    #call_bool_service('/save_gcode_point')
                                    #determinating the direction (from 0 to 360 or 360 to 0)
                                    if self.full_list[i][-2] - self.full_list[i-1][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] >cyclic_threshold: #yaw is decreasing
                                        #positive then rotate the other way (go to 0)
                                        #print("added -360")
                                        #tutorial.go_to_joint_state(359.9)

                                        #go back with the inclination
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n")
                                        #turn around
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n")
                                        # go back to the initial position  but now with the new C value
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-z_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-x_deviation,2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-z_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-x_deviation,2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n")
                                        print("cyclic_count:",cyclic_count)
                                        cyclic_count+=1
                                    elif self.full_list[i][-2] - self.full_list[i-1][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] < -cyclic_threshold: #yaw is decreasing
                                        #negative then rotate the other way (go to 360)
                                        #print("added +360")
                                        #tutorial.go_to_joint_state(0.0001)

                                        #go back with the inclination
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{359.9}F{feed_rate}\n")
                                        #turn around
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0],2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2],2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n")
                                        # go back to the initial position  but now with the new C value
                                        gcode += f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-z_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-x_deviation,2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n"
                                        print(f"G01X{round(response.joints[5]-x_offset -self.set_world_frame[0]-z_deviation,2)}Y{round(response.joints[6]-y_offset -self.set_world_frame[1],2)}Z{round(response.joints[7]-z_offset -self.set_world_frame[2]-x_deviation,2)}B{round(response.joints[8],2)}C{0.1}F{feed_rate}\n")
                                        print("cyclic_count:",cyclic_count)
                                        cyclic_count+=1
                                else:
                                    #print(f"No proper Cartesian Plan Found after {attempts} Attempts!")
                                    #ERROR_FLAG = True
                                    self.showMessageBox(text="Cartesian plan Failed", icon="Critical")
                                    #uncomment return None

                            except rospy.ServiceException as exc:
                                print("Service did not process request: " + str(exc))

                        else:

                            if self.full_list[i][-2] - self.full_list[i-1][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] > cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] >cyclic_threshold: #yaw is decreasing
                                print("c_no offset ", self.full_list[i][-2])
                                print("self.temp_c[-2]", self.full_list[i-1][-2])
                                print("self.temp_c[-3]", self.full_list[i-2][-2])
                                print("self.temp_c[-4]", self.full_list[i-3][-2])
                                add_degrees -=360

                            elif self.full_list[i][-2] - self.full_list[i-1][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-2][-2] < -cyclic_threshold and self.full_list[i][-2] - self.full_list[i-3][-2] < -cyclic_threshold: #yaw is decreasing
                                print("c_no offset ", self.full_list[i][-2])
                                print("self.temp_c[-2]", self.full_list[i-1][-2])
                                print("self.temp_c[-3]", self.full_list[i-2][-2])
                                print("self.temp_c[-4]", self.full_list[i-3][-2])
                                add_degrees += 360


                #if len(self.full_list[i])>=8: #either Rapid5d or Linear5D can come in
                rospy.wait_for_service('/calc_pose')
                service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)
                try:
                    request = CalculateJoints()
                    request.x_input = abs_pos[0]
                    request.y_input = abs_pos[1]
                    request.z_input = abs_pos[2]
                    if len(self.full_list[i])>= 8: #onlinear5d or onRapid5D
                        request.pitch_input = self.full_list[i][-1]
                        request.yaw_input = self.full_list[i][-2] + add_degrees
                    elif len(self.full_list[i])< 7:# onLinear or onRapid
                        request.pitch_input = 0
                        request.yaw_input = 0
                    elif len(self.full_list[i])== 7: #onCircular
                        abs_pos_circular_start = [self.set_offsets[k] +self.pos_offsets[k] + self.full_list[i][k] for k in range(len(self.pos_offsets))] #[x,y,z] abs offset
                        abs_pos_circular_end = [self.set_offsets[k] +self.pos_offsets[k] + self.full_list[i][3+k] for k in range(len(self.pos_offsets))] #[x,y,z] abs offset
                        request.x_input = abs_pos_circular_end[0]
                        request.y_input = abs_pos_circular_end[1]
                        request.z_input = abs_pos_circular_end[2]
                        request.pitch_input = 0
                        request.yaw_input = 0
                        r = round(math.sqrt((abs_pos_circular_end[0]-abs_pos_circular_start[0])**2 +(abs_pos_circular_end[1]-abs_pos_circular_start[1])**2 +(abs_pos_circular_end[2]-abs_pos_circular_start[2])**2),5)
                        #print(r)
                    response_srv = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                    #print(response)
                except rospy.ServiceException as exc:
                    print("Service did not process request: " + str(exc))

                if response_srv.success:

                    x_no_offset = round(response_srv.joints[5]-x_offset -self.set_world_frame[0],2)
                    y_no_offset = round(response_srv.joints[6]-y_offset -self.set_world_frame[1],2)
                    z_no_offset = round(response_srv.joints[7]-z_offset -self.set_world_frame[2],2)
                    #print(len(self.full_list[i]))
                    if len(self.full_list[i])== 3: #onlinear
                        gcode += f"G00X{x_no_offset}Y{y_no_offset}Z{z_no_offset}\n"

                        progress = int(count/total_lines *100)
                        print(progress)
                        self.progressBar.setValue(progress)
                        count +=1

                    elif len(self.full_list[i])== 4: #onlinear
                        f_no_offset = round(self.full_list[i][-1],2)
                        gcode += f"G01X{x_no_offset}Y{y_no_offset}Z{z_no_offset}F{f_no_offset}\n"

                        progress = int(count/total_lines *100)
                        print(progress)
                        self.progressBar.setValue(progress)
                        count +=1

                    elif len(self.full_list[i])==8: #onRapid5D
                        b_no_offset = round(response_srv.joints[8],2)
                        c_no_offset = round(response_srv.joints[9],2)
                        gcode += f"G00X{x_no_offset}Y{y_no_offset}Z{z_no_offset}B{b_no_offset}C{c_no_offset}\n"


                        progress = int(count/total_lines *100)
                        print(progress)
                        self.progressBar.setValue(progress)
                        count +=1

                    elif len(self.full_list[i])==10: #onLinear5D
                        f_no_offset = round(self.full_list[i][6],2)
                        b_no_offset = round(response_srv.joints[8],2)
                        c_no_offset = round(response_srv.joints[9],2)
                        gcode += f"G01X{x_no_offset}Y{y_no_offset}Z{z_no_offset}B{b_no_offset}C{c_no_offset}F{f_no_offset}\n"

                        progress = int(count/total_lines *100)
                        print(progress)
                        self.progressBar.setValue(progress)
                        count +=1

                    elif len(self.full_list[i])==7:
                        if cw:
                            gcode += f"G02X{x_no_offset}Y{y_no_offset}Z{z_no_offset}R{r}F{f_no_offset}\n"
                        else:
                            gcode += f"G03X{x_no_offset}Y{y_no_offset}Z{z_no_offset}R{r}F{f_no_offset}\n"
                        self.progressBar.setValue(progress)
                        count +=1


                else:
                    self.showMessageBox(text=f"No Motion Plan Found for point {i} x{self.full_list[i][0]}y{self.full_list[i][1]}z{self.full_list[i][2]}pitch{self.full_list[i][-1]}yaw{self.full_list[i][-2]}f{self.full_list[i][6]}", icon="Critical")
                    #return None




        except Exception as e:
            self.showMessageBox(text="Error when generating the code", icon="Critical")
            print(e)

        self.gcodeGenerationPlainTextEdit.clear()
        self.default_gcode = gcode
        self.gcodeGenerationPlainTextEdit.insertPlainText(self.default_gcode)
        self.file_to_save = True
        self.temp_x = []
        self.temp_y = []
        self.temp_z = []
        self.temp_b = []
        self.temp_c = []

    def save_fileCallback(self):
        if self.file_to_save:
            fileName, _ = QFileDialog.getSaveFileName(None,'Save File')
            file = open(fileName, 'w')
            file.write(self.gcodeGenerationPlainTextEdit.toPlainText())
            file.close()
            #self.file_to_save = False
        else:
            self.showMessageBox(text="Generate a File First", icon="Critical")

    def updateGcodeCallback(self):
        if self.file_to_save:
            if self.speedDefaultRadioButton.isChecked():
                self.gcodeGenerationPlainTextEdit.clear()
                self.gcodeGenerationPlainTextEdit.insertPlainText(self.default_gcode)

            elif self.speedRelativeRadioButton.isChecked() and self.speedConfigurationLineEdit.text():
                text = self.gcodeGenerationPlainTextEdit.toPlainText()
                text = text.split("\n")
                single_string_text = ""
                for i in range(len(text)):
                    index = text[i].find("F")
                    rel_factor = float(self.speedConfigurationLineEdit.text())/100.0
                    string_num = text[i][index+1:]
                    if string_num:
                        text[i] = text[i].replace(text[i][index:],f"F{float(string_num)*rel_factor}")
                        single_string_text += text[i] + "\n"
                self.gcodeGenerationPlainTextEdit.clear()
                self.gcodeGenerationPlainTextEdit.insertPlainText(single_string_text)


            elif self.speedAbsoluteRadioButton.isChecked() and self.speedConfigurationLineEdit.text():
                text = self.gcodeGenerationPlainTextEdit.toPlainText()
                text = text.split("\n")
                single_string_text = ""
                for i in range(len(text)):
                    index = text[i].find("F")
                    string_num = text[i][index+1:]
                    if string_num:
                        text[i] = text[i].replace(text[i][index:],f"F{self.speedConfigurationLineEdit.text()}")
                        single_string_text += text[i] + "\n"
                self.gcodeGenerationPlainTextEdit.clear()
                self.gcodeGenerationPlainTextEdit.insertPlainText(single_string_text)
            else:
                self.showMessageBox(text="Set the Feedrate", icon="Critical")
        else:
            self.showMessageBox(text="Generate a File First", icon="Critical")


    def loadGcodeCallback(self):
        try:
            name, _ = QFileDialog.getOpenFileName(None, 'Open File')
            file = open(name,'r')
            with file:
                text = file.read()
                self.extremesPlainTextEdit.clear()
                self.extremesPlainTextEdit.insertPlainText(text)
        except FileNotFoundError:
            print("No File Was Chosen/Found")

    def sendGcodeCallback(self):
        if self.SerialConnected:
        #if True:
            self.outputPlainTextEdit.clear()
            GLOBAL_LINES[0] = self.extremesPlainTextEdit.toPlainText()
            #print(lines)
            #lines = lines.split("\n")
            #counter = 1
            if len(GLOBAL_LINES[0])>1:
                # for elem in lines:
                #     rospy.wait_for_service('/cmd_input')
                #     service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
                #
                #     try:
                #         request = SendCommand()
                #         request.command = elem
                #         response = service_conn(request.command)
                #         r.sleep()
                #
                #         #print(response)
                #     except rospy.ServiceException as exc:
                #         print("Service did not process request: " + str(exc))
                #
                #     if response.success:
                #         #self.outputPlainTextEdit.clear()
                #         self.outputPlainTextEdit.insertPlainText(f"{counter}: {response.message}\n")
                        # counter +=1
                ############SERVER#####################
                # rospy.wait_for_service('/cmd_input')
                # service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
                #
                # try:
                #     request = SendCommand()
                #     request.command = lines
                #     request.simple_stream = False
                #     response = service_conn(request.command, request.simple_stream)
                #     if response.success:
                #         #self.outputPlainTextEdit.clear()
                #         self.outputPlainTextEdit.insertPlainText(f"{response.message}")
                #
                #     #print(response)
                # except rospy.ServiceException as exc:
                #     print("Service did not process request: " + str(exc))

                ########ACTION######################
                # self.action_client.wait_for_server()
                # goal = SerialCommunicationGoal(command="5")
                # feed = self.action_client.send_goal(goal, feedback_cb=self.feedback_cb)
                #
                #
                # self.action_client.wait_for_result()
                # result = self.action_client.get_result()
                # print(result)

                self.thread = QThread()
                self.worker = Worker()
                self.worker.moveToThread(self.thread)

                self.thread.started.connect(self.worker.call_action)
                self.worker.finished.connect(self.thread.quit)
                self.worker.finished.connect(self.worker.deleteLater)
                self.thread.finished.connect(self.thread.deleteLater)
                self.worker.progress.connect(self.reportProgress)
                # Step 6: Start the thread
                self.thread.start()

                # Final resets
                # self.longRunningBtn.setEnabled(False)
                # self.thread.finished.connect(
                #     lambda: self.longRunningBtn.setEnabled(True)
                # )
                # self.thread.finished.connect(
                #     lambda: self.stepLabel.setText("Long-Running Step: 0")
                # )


            else:
                self.showMessageBox(text="no Gcode Found", icon="Critical")
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")


    # def feedback_cb(self, msg):
    #     print("Feedback received: ", msg)
    #     self.outputPlainTextEdit.clear()
    #     self.outputPlainTextEdit.insertPlainText(f"{feed}")

    def reportProgress(self,rec):
        self.outputPlainTextEdit.clear()
        self.outputPlainTextEdit.insertPlainText(f"{rec}")


    def calulateExtremesCallback(self):
        lines = self.extremesPlainTextEdit.toPlainText()
        lines = lines.split("\n")
        firstTime = True
        if len(lines)>1:
            for line in lines:
                if line:
                    try:
                        x_index = line.find("X")
                        y_index = line.find("Y")
                        z_index = line.find("Z")
                        b_index = line.find("B")

                        x_val = float(line[x_index+1:y_index])
                        y_val = float(line[y_index+1:z_index])
                        z_val = float(line[z_index+1:b_index])

                        if firstTime:
                            max_x = x_val
                            min_x = x_val
                            max_y = y_val
                            min_y = y_val
                            max_z = y_val
                            min_z = y_val
                            firstTime = False

                        if x_val > max_x:
                            max_x = x_val
                        if x_val < min_x:
                            min_x = x_val
                        if y_val > max_y:
                            max_y = y_val
                        if y_val < min_y:
                            min_y = y_val
                        if z_val > max_z:
                            max_z = z_val
                        if z_val < min_z:
                            min_z = z_val

                        if max_x and min_x and max_y and min_y and max_z and min_z:
                            self.xMinLineEdit.setText(str(min_x))
                            self.yMinLineEdit.setText(str(min_y))
                            self.zMinLineEdit.setText(str(min_z))
                            self.xMaxLineEdit.setText(str(max_x))
                            self.yMaxLineEdit.setText(str(max_y))
                            self.zMaxLineEdit.setText(str(max_z))
                    except Exception as e:
                        self.showMessageBox(text="Gcode Format Is Wrong", icon="Critical")
        else:
            self.showMessageBox(text="No Gcode File found", icon="Critical")



    def startPointCallback(self):
        self.pointsPlainTextEdit.clear()
        self.secuence_counter = 1
        points = f"{self.secuence_counter}: X{0} Y{0} Z{0} PITCH{0} YAW{0} SPEED{500}"
        self.pointsPlainTextEdit.insertPlainText(points + "\n")
        self.secuence_counter+=1
        self.startButtonPressed = True

    def addButtonCallback(self):
        if self.startButtonPressed:
            try:
                x = float(self.addXLineEdit.text())
                y = float(self.addYLineEdit.text())
                z = float(self.addZLineEdit.text())
                pitch = float(self.addPitchLineEdit.text())
                yaw = float(self.addYawLineEdit.text())
                speed = float(self.addSpeedLineEdit.text())
                samples = int(self.addSamplesLineEdit.text())

                if speed<=0:
                    self.showMessageBox(text="Speed should have a positive value", icon="Critical")
                    return None
                elif samples<1:
                    self.showMessageBox(text="Samples should have a positive value", icon="Critical")
                    return None

            except ValueError:
                self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
                return None

            points = f"{self.secuence_counter}: X{x} Y{y} Z{z} PITCH{pitch} YAW{yaw} SPEED{speed} SAMPLES{samples}"
            self.pointsPlainTextEdit.insertPlainText(points + "\n")
            self.secuence_counter+=1

        else:
            self.showMessageBox(text="Press the start button first", icon="Critical")


    def addGenerateGcodeButtonCallback(self):
        x_list = []
        y_list = []
        z_list = []
        pitch_list = []
        yaw_list = []
        samples= []
        speed_list = []

        x_list_distance = []
        y_list_distance = []
        z_list_distance = []
        pitch_list_distance = []
        yaw_list_distance = []

        x_list_step = []
        y_list_step = []
        z_list_step = []
        pitch_list_step = []
        yaw_list_step = []

        my_list = []

        counter = 1

        lines = self.pointsPlainTextEdit.toPlainText()
        lines = lines.split("\n")
        for i in range(len(lines)-1):
            x_index = lines[i].find("X")
            y_index = lines[i].find("Y")
            z_index = lines[i].find("Z")
            pitch_index = lines[i].find("PITCH")
            yaw_index = lines[i].find("YAW")
            speed_index = lines[i].find("SPEED")
            samples_index = lines[i].find("SAMPLES")

            x_val = lines[i][x_index+1:y_index-1]
            y_val = lines[i][y_index+1:z_index-1]
            z_val = lines[i][z_index+1:pitch_index-1]
            pitch_val = lines[i][pitch_index+5:yaw_index-1]
            yaw_val = lines[i][yaw_index+3:speed_index-1]
            if samples_index >0:
                speed_val = lines[i][speed_index+5:samples_index-1]
                samples_val = lines[i][samples_index+7:]
                #print(f"x_val:{x_val}y_val{y_val}z_val{z_val}pitch{pitch_val}yaw_val{yaw_val}speed_val{speed_val}samples_val{samples_val}")
                samples.append(float(samples_val))
                speed_list.append(float(speed_val))
            else:
                speed_val = lines[i][speed_index+5:]
                speed_list.append(float(speed_val))


            x_list.append(float(x_val) + self.pos_offsets[0] + self.set_offsets[0] +self.set_world_frame[0])
            y_list.append(float(y_val) + self.pos_offsets[1] + self.set_offsets[1] +self.set_world_frame[1])
            z_list.append(float(z_val) + self.pos_offsets[2] + self.set_offsets[2] +self.set_world_frame[2])
            pitch_list.append(float(pitch_val))
            yaw_list.append(float(yaw_val))


        total_lines = sum(samples)#+len(samples)


        for k in range(len(samples)):
            x_list_distance.append(x_list[k+1] - x_list[k])
            y_list_distance.append(y_list[k+1] - y_list[k])
            z_list_distance.append(z_list[k+1] - z_list[k])
            pitch_list_distance.append(pitch_list[k+1] - pitch_list[k])
            yaw_list_distance.append(yaw_list[k+1] - yaw_list[k])

            #print(f"iteration: {k}, x_list_distance = {x_list_distance}, y_list_distance = {y_list_distance}, z_list_distance = {z_list_distance}, pitch_list_distance = {pitch_list_distance}, yaw_list_distance = {yaw_list_distance}")

            x_list_step.append(x_list_distance[k] / samples[k])
            y_list_step.append(y_list_distance[k] / samples[k])
            z_list_step.append(z_list_distance[k] / samples[k])
            pitch_list_step.append(pitch_list_distance[k] / samples[k])
            yaw_list_step.append(yaw_list_distance[k] / samples[k])

            #print(f"iteration: {k}, x_list_step = {x_list_step}, y_list_step = {y_list_step}, z_list_step = {z_list_step}, pitch_list_step = {pitch_list_step}, yaw_list_step = {yaw_list_step}")

            for i in range(int(samples[k])+1): ##for i in range(int(samples[k])+1):
                rospy.wait_for_service('/calc_pose')
                service_conn = rospy.ServiceProxy('/calc_pose', CalculateJoints)
                if i!=0:
                    try:
                        request = CalculateJoints()
                        request.x_input = x_list[k] + i*x_list_step[k]
                        request.y_input = y_list[k] + i*y_list_step[k]
                        request.z_input = z_list[k] + i*z_list_step[k]
                        request.pitch_input = pitch_list[k] + i*pitch_list_step[k]
                        request.yaw_input = yaw_list[k] + i*yaw_list_step[k]
                        #print(f"iteration: {k},{i}, x_input = {request.x_input}, y_input = {request.y_input}, z_input = {request.z_input}, pitch_input = {request.pitch_input}, yaw_input = {request.yaw_input}")
                        response = service_conn(request.x_input, request.y_input, request.z_input, request.pitch_input, request.yaw_input)
                        #print(response)
                    except rospy.ServiceException as exc:
                        print("Service did not process request: " + str(exc))

                    if response.success:
                        #calculated joints
                        x_response = round(response.joints[5]-self.abs_offset[0]-self.set_world_frame[0],2)
                        y_response = round(response.joints[6]-self.abs_offset[1]-self.set_world_frame[1],2)
                        z_response = round(response.joints[7]-self.abs_offset[2]-self.set_world_frame[2],2)
                        b_response = round(response.joints[8],2)
                        c_response = round(response.joints[9],2)
                        #print(f"iteration: {k},{i}, G01X{x_response}Y{y_response}Z{z_response}B{b_response}C{c_response}F1500")
                        #if i%2==1: #only for testing otherwise remove this line

                        my_list.append(f"G01X{x_response}Y{y_response}Z{z_response}B{b_response}C{c_response}F{speed_list[k+1]}")
                        progress = counter/total_lines *100
                        self.addProgressBar.setValue(progress)
                        counter +=1

                    else:
                        self.showMessageBox(text="No Motion Plan Found", icon="Critical")
                        return None

        self.extremesPlainTextEdit.clear()
        for elem in my_list:
            self.extremesPlainTextEdit.insertPlainText(elem + "\n")

    def sendCallback(self):
        if self.SerialConnected:
        #if True:
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
            #print(len(self.cmdLineEdit.text())):
            try:
                request = SendCommand()
                request.command = self.cmdLineEdit.text()
                request.simple_stream = True
                response = service_conn(request.command,request.simple_stream)
                #print(response)
                if response.success:
                    message_str = ""
                    split_data = response.message.split('\\r\\n')
                    for i in split_data:
                        message_str += i+"\n"
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(message_str)

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")




    def connectCallback(self):
        if not self.SerialConnected:
            try:
                node = roslaunch.core.Node("project_praktikum_moveit_config", "cls_ros_ser_com.py")
                launch = roslaunch.scriptapi.ROSLaunch()
                launch.start()
                script = launch.launch(node)

                self.outputPlainTextEdit.clear()
                self.outputPlainTextEdit.insertPlainText("Node Is Running")
                self.SerialConnected = True
                self.idleLabel.setText("Connected Locked")
                #Enabling all the Buttons for the Microcontroller communication
                self.refreshButton.setEnabled(True)
                self.unlockButton.setEnabled(True)
                self.homeButton.setEnabled(True)
                self.hButton.setEnabled(True)
                self.backXButton.setEnabled(True)
                self.forwardXButton.setEnabled(True)
                self.backYButton.setEnabled(True)
                self.forwardYButton.setEnabled(True)
                self.backZButton.setEnabled(True)
                self.forwardZButton.setEnabled(True)
                self.backBButton.setEnabled(True)
                self.forwardBButton.setEnabled(True)
                self.backCButton.setEnabled(True)
                self.forwardCButton.setEnabled(True)
                self.feedHorizontalSlider.setEnabled(True)
                self.stepSpinBox.setEnabled(True)
                self.continuousRadioButton.setEnabled(True)
                self.onceRadioButton.setEnabled(True)
                self.setButton.setEnabled(True)
                self.sendButton.setEnabled(True)
                self.sendGcodeButton.setEnabled(True)


            except:
                self.showMessageBox(text="No Connection Found", icon="Critical")


    def unlockCallback(self):
        #if True:
        if self.SerialConnected:
            rospy.sleep(1.0)
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = "$X"
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)
                    self.idleLabel.setText("Connected Unlocked")
            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def homeCallBack(self):
        if self.SerialConnected:
            self.communicationCommand(cmd="G01X0Y0Z0B0C0F1000")
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

##############################JOGGING##################################################
#######################################################################################

    def backXCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.backXButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91X-{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)

            else:
                ######CONTINUOUS STATE#################
                self.backXButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90X-400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedBackXCallback(self):
        #print("Button State DOWN",self.backXButton.isDown())
        if not self.backXButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)

        self.communicationCommand(cmd="?")

    def forwardXCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.forwardXButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91X{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.forwardXButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90X400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedForwardXCallback(self):
        #print("Button State DOWN",self.forwardXButton.isDown())
        if not self.forwardXButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def backYCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.backYButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91Y-{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.backYButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90Y-400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedBackYCallback(self):
        #print("Button State DOWN",self.backYButton.isDown())
        if not self.backYButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def forwardYCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.forwardYButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91Y{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.forwardYButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90Y400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedForwardYCallback(self):
        #print("Button State DOWN",self.forwardYButton.isDown())
        if not self.forwardYButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def backZCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.backZButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91Z-{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.backZButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90Z-400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedBackZCallback(self):
        #print("Button State DOWN",self.backZButton.isDown())
        if not self.backZButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def forwardZCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.forwardZButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91Z{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.forwardZButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90Z400F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedForwardZCallback(self):
        #print("Button State DOWN",self.forwardZButton.isDown())
        if not self.forwardZButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")


    def backBCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.backBButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91B-{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.backBButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90B-359F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedBackBCallback(self):
        #print("Button State DOWN",self.backBButton.isDown())
        if not self.backBButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")


    def forwardBCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.forwardBButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91B{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.forwardBButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90B359F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedForwardBCallback(self):
        #print("Button State DOWN",self.forwardBButton.isDown())
        if not self.forwardBButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")


    def backCCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.backCButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91C-{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.backCButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90C-359F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedBackCCallback(self):
        #print("Button State DOWN",self.backCButton.isDown())
        if not self.backCButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def forwardCCallback(self):
        if self.SerialConnected:
            if self.onceRadioButton.isChecked():
                ##########NON CONTINUOUS STATE######################
                self.forwardCButton.setAutoRepeat(False)
                self.coming_from_continuous_state = False
                gcode = f"$J=G91C{self.stepSpinBox.value()}F{self.feedLineEdit.text()}"
                self.communicationCommand(gcode)
            else:
                ######CONTINUOUS STATE#################
                self.forwardCButton.setAutoRepeat(True)
                self.coming_from_continuous_state = True
                #print(f"continuous, counter: {self.joggingCounter}")
                if self.joggingCounter == 0:
                    #print(f"$J=G90X-400F{self.feedLineEdit.text()}")
                    gcode = f"$J=G90C359F{self.feedLineEdit.text()}"
                    self.communicationCommand(gcode)
                self.joggingCounter +=1
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def releasedForwardCCallback(self):
        #print("Button State DOWN",self.forwardCButton.isDown())
        if not self.forwardCButton.isDown() and self.coming_from_continuous_state:
            self.joggingCounter = 0
            #print("sending cancel command")
            self.continuous_state = False
            self.communicationCommand(cmd="cancel")
            #rospy.sleep(1.0)
        self.communicationCommand(cmd="?")

    def setCallback(self):
        if self.SerialConnected:
            global_coordinates[0] = 0
            global_coordinates[1] = 0
            global_coordinates[2] = 0
            global_coordinates[3] = 0
            global_coordinates[4] = 0

            gcode = f"G92X{global_coordinates[0]}Y{global_coordinates[1]}Z{global_coordinates[2]}B{global_coordinates[3]}C{global_coordinates[4]}"
            rospy.wait_for_service('/cmd_input')
            service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)

            try:
                request = SendCommand()
                request.command = gcode
                request.simple_stream = True
                response = service_conn(request.command, request.simple_stream)
                #print(response)
                if response.success:
                    self.outputPlainTextEdit.clear()
                    self.outputPlainTextEdit.insertPlainText(response.message)
                    self.communicationCommand(cmd="?")

            except rospy.ServiceException as exc:
                print("Service did not process request: " + str(exc))
        else:
            self.showMessageBox(text="No Serial Communication", icon="Critical")

    def refreshCallback(self):
        self.communicationCommand(cmd="?")

    def valueChangeCallback(self):
        step_scale = 50 #we get values from 0-99 so we just multiply it and map the range between 0-4950
        self.feedLineEdit.setText(str(self.feedHorizontalSlider.value()*step_scale))

    def communicationCommand(self,cmd):
        rospy.wait_for_service('/cmd_input')
        service_conn = rospy.ServiceProxy('/cmd_input', SendCommand)
        try:
            request = SendCommand()
            request.command = cmd
            request.simple_stream = True
            response = service_conn(request.command, request.simple_stream)
            #print(response)
            if response.success:
                #self.outputPlainTextEdit.clear()
                #self.outputPlainTextEdit.insertPlainText(response.message)
                index_response = response.message.find("|F")
                index_status = response.message.find("|")
                index_start = response.message.find("<")
                #print(response.message[:index_response])
                if index_response >0:
                    self.mposLabel.setText(response.message[index_start+1:index_response])
                if index_status>0:
                    self.idleLabel.setText(response.message[index_start+1:index_status])
        except rospy.ServiceException as exc:
            print("Service did not process request: " + str(exc))

    ########################################################################################
    #####################################CARTESIAN##########################################
    def checkCartesianButtonCallback(self):
        try:
            x = float(self.xmmCartesianLineEdit.text())
            y = float(self.ymmCartesianLineEdit.text())
            z = float(self.zmmCartesianLineEdit.text())
            roll = float(self.rollCartesianLineEdit.text())
            pitch = float(self.pitchCartesianLineEdit.text())
            yaw = float(self.yawCartesianLineEdit.text())
            speed = float(self.speedCartesianLineEdit.text())
            samples = int(self.samplesCartesianLineEdit.text())
            cartesian_mode = self.cartesianModecheckBox.isChecked()

            if speed<=0:
                self.showMessageBox(text="Speed should have a positive value", icon="Critical")
                return None
            elif samples<1:
                self.showMessageBox(text="Samples should have a positive value", icon="Critical")
                return None
            elif cartesian_mode and samples != 1:
                self.showMessageBox(text="Samples should be 1 when using cartesian mode", icon="Critical")
                return None
        except ValueError:
            self.showMessageBox(text="please make sure to set all the values and valid format", icon="Critical")
            return None


        if self.cartesianModecheckBox.isChecked():
            #cartesian mode
            service_name = "/plan_cartesian"
            rospy.wait_for_service(service_name)
            service_conn = rospy.ServiceProxy(service_name, CalculateJoints)
            last_service = service_name
        else:
            #crazy mode
            service_name = "/calc_pose"
            rospy.wait_for_service(service_name)
            service_conn = rospy.ServiceProxy(service_name, CalculateJoints)

        try:
            request = CalculateJoints()
            request.x_input = x
            request.y_input = y
            request.z_input = z
            request.roll_input = roll
            request.pitch_input = pitch
            request.yaw_input = yaw
            request.check = 1
            response = service_conn(request.x_input, request.y_input, request.z_input, request.roll_input, request.pitch_input, request.yaw_input, request.check)
            #print(response)
        except rospy.ServiceException as exc:
            print("Service did not process request: " + str(exc))

        if response.success:
            self.checkCartesian = True

            # end_J = []
            # start = 0 if self.cartesianModecheckBox.isChecked() else 6
            # total_joints = len(response.joints)
            # step = 1
            # #print(response.joints)
            # for i in range(start,total_joints,step):
            #     end_J.append(round(response.joints[i],2))
            #     print()
            #     if i%6 == 5:
            #         self.cartesianGcodePlainTextEdit.insertPlainText(f"G01J1{end_J[i-5-start]}J2{end_J[i-4-start]}J3{end_J[i-3-start]}J4{end_J[i-2-start]}J5{end_J[i-1-start]}J6{end_J[i-start]}F{speed}\n")

            #display the data received from the service
            #current_joints
            # start_J1 = round(response.joints[0],2)
            # start_J2 = round(response.joints[1],2)
            # start_J3 = round(response.joints[2],2)
            # start_J4 = round(response.joints[3],2)
            # start_J5 = round(response.joints[4],2)
            # start_J6 = round(response.joints[5],2)

            # self.yCurrentJointsLineEdit.setText(str(round(response.joints[1]-self.abs_offset[1]-self.set_world_frame[1],2)))
            # self.zCurrentJointsLineEdit.setText(str(round(response.joints[2]-self.abs_offset[2]-self.set_world_frame[2],2)))
            # self.aCurrentJointsLineEdit.setText(str(round(response.joints[3],2)))
            # self.bCurrentJointsLineEdit.setText(str(round(response.joints[4],2)))
            # self.cCurrentJointsLineEdit.setText(str(round(response.joints[5],2)))

            # end_J1 = round(response.joints[6],2)
            # end_J2 = round(response.joints[7],2)
            # end_J3 = round(response.joints[8],2)
            # end_J4 = round(response.joints[9],2)
            # end_J5 = round(response.joints[10],2)
            # end_J6 = round(response.joints[11],2)

                # end_J1 = round(response.joints[i],2)
                # end_J2 = round(response.joints[1],2)
                # end_J3 = round(response.joints[2],2)
                # end_J4 = round(response.joints[3],2)
                # end_J5 = round(response.joints[4],2)
                # end_J6 = round(response.joints[5],2)

            #calculated joints
            # self.xCalculatedJointsLineEdit.setText(str(round(response.joints[6]-self.abs_offset[0]-self.set_world_frame[0],2)))
            # self.yCalculatedJointsLineEdit.setText(str(round(response.joints[7]-self.abs_offset[1]-self.set_world_frame[1],2)))
            # self.zCalculatedJointsLineEdit.setText(str(round(response.joints[8]-self.abs_offset[2]-self.set_world_frame[2],2)))
            # self.aCalculatedJointsLineEdit.setText(str(round(response.joints[9],2)))
            # self.bCalculatedJointsLineEdit.setText(str(round(response.joints[10],2)))
            # self.cCalculatedJointsLineEdit.setText(str(round(response.joints[11],2)))



            self.calculated_plan = True
            self.showMessageBox(text="Valid Plan", icon="Information")
            return None

        else:
            self.showMessageBox(text="No Motion Plan Found", icon="Critical")
            return None

    def desirePoseAddButtonCallback(self):
        if self.checkCartesian and self.cartesianStartButtonPressed:
            x = float(self.xmmCartesianLineEdit.text())
            y = float(self.ymmCartesianLineEdit.text())
            z = float(self.zmmCartesianLineEdit.text())
            roll = float(self.rollCartesianLineEdit.text())
            pitch = float(self.pitchCartesianLineEdit.text())
            yaw = float(self.yawCartesianLineEdit.text())
            speed = float(self.speedCartesianLineEdit.text())
            samples = int(self.samplesCartesianLineEdit.text())
            vel = self.cartesianSimSpeedSpinBox.value()
            self.file_to_save = True

            points = f"{self.secuence_counter_cartesian}: X{x}Y{y}Z{z}R{roll}P{pitch}YA{yaw}SP{speed}SAM{samples}CAR{self.cartesianModecheckBox.isChecked()}V{vel}"
            self.cartesianTrajectoryPlainTextEdit.insertPlainText(points + "\n")
            self.secuence_counter_cartesian+=1
            self.checkCartesian = False
        else:
            self.showMessageBox(text="Press the start and check button first", icon="Critical")

    def cartesianStartPointCallback(self):
        self.cartesianTrajectoryPlainTextEdit.clear()
        self.secuence_counter_cartesian = 1
        rospy.wait_for_service('/get_pose')
        service_conn = rospy.ServiceProxy('/get_pose', SetBool)
        try:
            request = SetBool()
            request.data = True
            response = service_conn(request.data)
            print(response)
        except rospy.ServiceException as exc:
            print("Service did not process request: " + str(exc))

        x_index = response.message.find("X")
        y_index = response.message.find("Y")
        z_index = response.message.find("Z")
        roll_index = response.message.find("Roll")
        pitch_index = response.message.find("Pitch")
        yaw_index = response.message.find("Yaw")

        x_val = response.message[x_index+1:y_index]
        y_val = response.message[y_index+1:z_index]
        z_val = response.message[z_index+1:roll_index]
        roll_val = response.message[roll_index+4:pitch_index]
        pitch_val = response.message[pitch_index+5:yaw_index]
        yaw_val = response.message[yaw_index+3:]

        points = f"{self.secuence_counter_cartesian}: X{x_val}Y{y_val}Z{z_val}R{roll_val}P{pitch_val}YA{yaw_val}SP{500}"
        self.cartesianTrajectoryPlainTextEdit.insertPlainText(points + "\n")
        self.secuence_counter_cartesian+=1
        self.cartesianStartButtonPressed = True
        self.cartesian_gcode = []


    def cartesianTrajectoryExecuteButtonCallback(self):
        self.cartesian_gcode = []
        GLOABAL_LINES_CARTESIAN[0] = self.cartesianTrajectoryPlainTextEdit.toPlainText()
        #print("cartesian Trajectory Execution")
        self.thread_execute_cartesian = QThread()
        self.worker_execute_cartesian = Worker()
        self.worker_execute_cartesian.moveToThread(self.thread_execute_cartesian)

        self.thread_execute_cartesian.started.connect(self.worker_execute_cartesian.cartesian_call_action_execution)

        self.worker_execute_cartesian.finished.connect(self.thread_execute_cartesian.quit)
        self.worker_execute_cartesian.finished.connect(self.worker_execute_cartesian.deleteLater)
        self.thread_execute_cartesian.finished.connect(self.thread_execute_cartesian.deleteLater)
        self.worker_execute_cartesian.progress.connect(self.cartesian_reportProgress)

        self.thread_execute_cartesian.start()
        print("starting the thread")

    def cartesian_reportProgress(self,rec):
        self.cartesian_gcode = rec
        #print(self.cartesian_gcode)
        # self.outputPlainTextEdit.clear()
        # self.outputPlainTextEdit.insertPlainText(f"{rec}")

    def cartesianGcodeGenerateButtonCallback(self):
        if self.cartesian_gcode:
            #print("cartesian gcode")
            #print(self.cartesian_gcode)
            lines = self.cartesian_gcode.split("\n")
            self.cartesianGcodePlainTextEdit.clear()
            #print("here starts the line")
            #print(lines)
            for line in lines:
                #print(line)
                self.cartesianGcodePlainTextEdit.insertPlainText(line + "\n")

        else:
            print("noting")

    def cartesianTrajectoryLoadButtonCallback(self):
        try:
            name, _ = QFileDialog.getOpenFileName(None, 'Open File')
            file = open(name,'r')
            with file:
                text = file.read()
                self.cartesianTrajectoryPlainTextEdit.clear()
                self.cartesianTrajectoryPlainTextEdit.insertPlainText(text)
        except FileNotFoundError:
            print("No File Was Chosen/Found")

    def cartesianTrajectorySaveButtonCallback(self):
        if self.file_to_save:
            fileName, _ = QFileDialog.getSaveFileName(None,'Save File')
            file = open(fileName, 'w')
            file.write(self.cartesianTrajectoryPlainTextEdit.toPlainText())
            file.close()
            #self.file_to_save = False
        else:
            self.showMessageBox(text="Add a trajectory point first", icon="Critical")

if __name__ == "__main__":
    import sys
    rospy.init_node('doldGui', anonymous=True)
    rospy.on_shutdown(Finisher().clean_shutdown)
    pub = rospy.Publisher("/send_cmd", String, queue_size=1)
    global_coordinates = [0,0,0,0,0]
    global_factor = 1
    global_F = 500

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
